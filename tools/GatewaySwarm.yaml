openapi: 3.0.3
info:
  version: 3.0.1
  title: Bee API
  description: A list of the currently provided Interfaces to interact with the
    swarm, implementing file operations and sending messages
security:
  - {}
externalDocs:
  description: Browse the documentation @ the Swarm Docs
  url: https://docs.ethswarm.org
servers:
  - url: http://{apiRoot}:{port}/v1
    variables:
      apiRoot:
        default: localhost
        description: Base address of the local bee node main API
      port:
        default: "1633"
        description: Service port provided in bee node config
  - url: http://{apiRoot}:{port}
    variables:
      apiRoot:
        default: localhost
        description: Base address of the local bee node main API
      port:
        default: "1633"
        description: Service port provided in bee node config
paths:
  /auth:
    post:
      summary: Authenticate - This endpoint is experimental
      tags:
        - Auth
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              &a1
              type: object
              properties:
                role:
                  type: string
                  nullable: false
                expiry:
                  type: integer
                  nullable: false
                  description: Expiration time in seconds
      responses:
        "201":
          description: Ok
          content:
            application/json:
              schema:
                &a2
                type: object
                properties:
                  key:
                    type: string
                    nullable: false
        "400":
          &a3
          description: Bad request
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
        "401":
          &a4
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
        "500":
          &a5
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
        default:
          description: Default response
  /refresh:
    post:
      summary: Refresh the auth token - This endpoint is experimental
      tags:
        - Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: *a1
      responses:
        "201":
          description: Ok
          content:
            application/json:
              schema: *a2
        "400": *a3
        "401": *a4
        "500": *a5
        default:
          description: Default response
  /bytes:
    post:
      summary: Upload data
      tags:
        - Bytes
      parameters:
        - &a9
          in: header
          name: swarm-tag
          schema:
            &a6
            type: integer
          required: false
          description: Associate upload with an existing Tag UID
        - &a10
          in: header
          name: swarm-pin
          schema:
            type: boolean
          required: false
          description: >
            Represents if the uploaded data should be also locally pinned on the
            node.

            Warning! Not available for nodes that run in Gateway mode!
        - &a15
          in: header
          name: swarm-encrypt
          schema:
            type: boolean
          required: false
          description: |
            Represents the encrypting state of the file
            Warning! Not available for nodes that run in Gateway mode!
        - &a11
          in: header
          name: swarm-postage-batch-id
          description: ID of Postage Batch that is used to upload data with
          required: true
          schema:
            type: string
            pattern: ^[A-Fa-f0-9]{64}$
            example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
        - &a12
          in: header
          name: swarm-deferred-upload
          schema:
            type: boolean
            default: "true"
          required: false
          description: >
            Determines if the uploaded data should be sent to the network
            immediately or in a deferred fashion. By default the upload will be
            deferred.
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Ok
          headers:
            swarm-tag:
              &a16
              description: Tag UID
              schema: *a6
          content:
            application/json:
              schema:
                &a17
                type: object
                properties:
                  reference:
                    oneOf:
                      - type: string
                        pattern: ^[A-Fa-f0-9]{64}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                      - type: string
                        pattern: ^[A-Fa-f0-9]{128}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
                      - type: string
                        pattern: ^[A-Za-z0-9]+\.[A-Za-z0-9]+$
                        example: swarm.eth
        "400": *a3
        "402":
          &a13
          description: Payment Required
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
        "403":
          &a14
          description: Endpoint or header (pinning or encryption headers) forbidden in
            Gateway mode
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
        "500": *a5
        default:
          description: Default response
  "/bytes/{reference}":
    get:
      summary: Get referenced data
      tags:
        - Bytes
      parameters:
        - in: path
          name: reference
          schema:
            &a7
            oneOf:
              - type: string
                pattern: ^[A-Fa-f0-9]{64}$
                example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
              - type: string
                pattern: ^[A-Fa-f0-9]{128}$
                example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
              - type: string
                pattern: ^[A-Za-z0-9]+\.[A-Za-z0-9]+$
                example: swarm.eth
          required: true
          description: Swarm address reference to content
      responses:
        "200":
          description: Retrieved content specified by reference
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          &a8
          description: Not Found
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
        default:
          description: Default response
  "/chunks/{reference}":
    get:
      summary: Get Chunk
      tags:
        - Chunk
      parameters:
        - in: path
          name: reference
          schema: *a7
          required: true
          description: Swarm address of chunk
      responses:
        "200":
          description: Retrieved chunk content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a3
        "404": *a8
        "500": *a5
        default:
          description: Default response
  /chunks:
    post:
      summary: Upload Chunk
      tags:
        - Chunk
      parameters:
        - *a9
        - *a10
        - *a11
        - *a12
      requestBody:
        description: Chunk binary data that has to have at least 8 bytes.
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Ok
          headers:
            swarm-tag:
              description: Tag UID if it was passed to the request `swarm-tag` header.
              schema: *a6
          content:
            application/json:
              schema:
                &a19
                type: object
                properties:
                  status:
                    type: string
                  version:
                    type: string
                  apiVersion:
                    type: string
                    default: 0.0.0
                    description: The default value is set in case the bee binary was not build
                      correctly.
                  debugApiVersion:
                    type: string
                    default: 0.0.0
                    description: The default value is set in case the bee binary was not build
                      correctly.
        "400": *a3
        "402": *a13
        "403": *a14
        "500": *a5
        default:
          description: Default response
  /chunks/stream:
    get:
      summary: Upload stream of chunks
      tags:
        - Chunk
      parameters:
        - *a9
        - *a10
        - *a11
      responses:
        "200":
          description: Returns a Websocket connection on which stream of chunks can be
            uploaded. Each chunk sent is acknowledged using a binary response
            `0` which serves as confirmation of upload of single chunk. Chunks
            should be packaged as binary messages for uploading.
        "400": *a3
        default:
          description: Default response
  /bzz:
    post:
      summary: Upload file or a collection of files
      description: >-
        In order to upload a collection, user can send a multipart request with
        all the files populated in the form data with appropriate headers.

         User can also upload a tar file along with the swarm-collection header. This will upload the tar file after extracting the entire directory structure.

         If the swarm-collection header is absent, all requests (including tar files) are considered as single file uploads.

         A multipart request is treated as a collection regardless of whether the swarm-collection header is present. This means in order to serve single files uploaded as a multipart request, the swarm-index-document header should be used with the name of the file.
      tags:
        - BZZ
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Filename when uploading single file
        - *a9
        - *a10
        - *a15
        - in: header
          name: Content-Type
          schema:
            type: string
          description: The specified content-type is preserved for download of the asset
        - in: header
          name: swarm-collection
          schema:
            type: boolean
          required: false
          description: Upload file/files as a collection
        - in: header
          name: swarm-index-document
          schema:
            type: string
            example: index.html
          required: false
          description: Default file to be referenced on path, if exists under that path
        - in: header
          name: swarm-error-document
          schema:
            type: string
            example: error.html
          required: false
          description: Configure custom error document to be returned when a specified
            path can not be found in collection
        - *a11
        - *a12
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
          application/octet-stream:
            schema:
              type: string
              format: binary
          application/x-tar:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Ok
          headers:
            swarm-tag: *a16
            etag:
              description: >
                The RFC7232 ETag header field in a response provides the current
                entity-

                tag for the selected resource. An entity-tag is an opaque identifier for

                different versions of a resource over time, regardless whether multiple

                versions are valid at the same time. An entity-tag consists of an opaque

                quoted string, possibly prefixed by a weakness indicator.
              schema:
                type: string
          content:
            application/json:
              schema: *a17
        "400": *a3
        "402": *a13
        "403": *a14
        "500": *a5
        default:
          description: Default response
  "/bzz/{reference}":
    patch:
      summary: "Reupload a root hash to the network; deprecated: use
        /stewardship/{reference} instead"
      deprecated: true
      tags:
        - BZZ
      parameters:
        - in: path
          name: reference
          schema: *a7
          required: true
          description: "Root hash of content (can be of any type: collection, file, chunk)"
      responses:
        "200":
          description: Ok
        "500": *a5
        default:
          description: Default response
    get:
      summary: Get file or index document from a collection of files
      tags:
        - BZZ
      parameters:
        - in: path
          name: reference
          schema: *a7
          required: true
          description: Swarm address of content
      responses:
        "200":
          description: Ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a3
        "404": *a8
        "500": *a5
        default:
          description: Default response
  "/bzz/{reference}/{path}":
    get:
      summary: Get referenced file from a collection of files
      tags:
        - BZZ
      parameters:
        - in: path
          name: reference
          schema: *a7
          required: true
          description: Swarm address of content
        - in: path
          name: path
          schema:
            type: string
          required: true
          description: Path to the file in the collection.
      responses:
        "200":
          description: Ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a3
        "404": *a8
        "500": *a5
        default:
          description: Default response
  /tags:
    get:
      summary: Get list of tags
      tags:
        - Tag
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of items to skip before starting to collect the result
            set.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          required: false
          description: The numbers of items to return.
      responses:
        "200":
          description: List of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    nullable: true
                    items:
                      type: object
                      properties:
                        uid:
                          type: integer
                        startedAt:
                          type: string
                          format: date-time
                          example: 2020-06-11T11:26:42.6969797+02:00
                        total:
                          type: integer
                        processed:
                          type: integer
                        synced:
                          type: integer
        "403": *a14
        "500": *a5
        default:
          description: Default response
    post:
      summary: Create Tag
      tags:
        - Tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  pattern: ^[A-Fa-f0-9]{64}$
                  example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
      responses:
        "201":
          description: New Tag Info
          content:
            application/json:
              schema:
                &a18
                type: object
                properties:
                  uid:
                    type: integer
                  startedAt:
                    type: string
                    format: date-time
                    example: 2020-06-11T11:26:42.6969797+02:00
                  total:
                    type: integer
                  processed:
                    type: integer
                  synced:
                    type: integer
        "403": *a14
        "500": *a5
        default:
          description: Default response
  "/tags/{uid}":
    get:
      summary: Get Tag information using Uid
      tags:
        - Tag
      parameters:
        - in: path
          name: uid
          schema: *a6
          required: true
          description: Uid
      responses:
        "200":
          description: Tag info
          content:
            application/json:
              schema: *a18
        "400": *a3
        "403": *a14
        "404": *a8
        "500": *a5
        default:
          description: Default response
    delete:
      summary: Delete Tag information using Uid
      tags:
        - Tag
      parameters:
        - in: path
          name: uid
          schema: *a6
          required: true
          description: Uid
      responses:
        "204":
          description: The resource was deleted successfully.
        "400": *a3
        "403": *a14
        "404": *a8
        "500": *a5
        default:
          description: Default response
    patch:
      summary: Update Total Count and swarm hash for a tag of an input stream of
        unknown size using Uid
      tags:
        - Tag
      parameters:
        - in: path
          name: uid
          schema: *a6
          required: true
          description: Uid
      requestBody:
        description: Can contain swarm hash to use for the tag
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  pattern: ^[A-Fa-f0-9]{64}$
                  example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema: *a19
        "403": *a14
        "404": *a8
        "500": *a5
        default:
          description: Default response
  "/pins/{reference}":
    parameters:
      - in: path
        name: reference
        schema:
          &a21
          oneOf:
            - type: string
              pattern: ^[A-Fa-f0-9]{64}$
              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
            - type: string
              pattern: ^[A-Fa-f0-9]{128}$
              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
        required: true
        description: Swarm reference of the root hash
    post:
      summary: Pin the root hash with the given reference
      tags:
        - Pinning
      responses:
        "200":
          description: Pin already exists, so no operation
          content:
            application/json:
              schema:
                &a20
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
        "201":
          description: New pin with root reference was created
          content:
            application/json:
              schema: *a20
        "400": *a3
        "403": *a14
        "404": *a8
        "500": *a5
        default:
          description: Default response
    delete:
      summary: Unpin the root hash with the given reference
      tags:
        - Pinning
      responses:
        "200":
          description: Unpinning root hash with reference
          content:
            application/json:
              schema: *a20
        "400": *a3
        "403": *a14
        "500": *a5
        default:
          description: Default response
    get:
      summary: Get pinning status of the root hash with the given reference
      tags:
        - Pinning
      responses:
        "200":
          description: Reference of the pinned root hash
          content:
            application/json:
              schema: *a21
        "400": *a3
        "403": *a14
        "404": *a8
        "500": *a5
        default:
          description: Default response
  /pins:
    get:
      summary: Get the list of pinned root hash references
      tags:
        - Pinning
      responses:
        "200":
          description: List of pinned root hash references
          content:
            application/json:
              schema:
                type: object
                properties:
                  references:
                    type: array
                    nullable: false
                    items:
                      oneOf:
                        - type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                        - type: string
                          pattern: ^[A-Fa-f0-9]{128}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
        "403": *a14
        "500": *a5
        default:
          description: Default response
  "/pss/send/{topic}/{targets}":
    post:
      summary: Send to recipient or target with Postal Service for Swarm
      tags:
        - Postal Service for Swarm
      parameters:
        - in: path
          name: topic
          schema:
            &a22
            type: string
          required: true
          description: Topic name
        - in: path
          name: targets
          schema:
            pattern: ^[0-9a-fA-F]{1,6}(,[0-9a-fA-F]{1,6})*$
            description: List of hex string targets that are comma seprated and can have
              maximum length of 6
            type: string
          required: true
          description: Target message address prefix. If multiple targets are specified,
            only one would be matched.
        - in: query
          name: recipient
          schema:
            type: string
          required: false
          description: Recipient publickey
        - *a11
      responses:
        "201":
          description: Subscribed to topic
        "400": *a3
        "402": *a13
        "403": *a14
        "500": *a5
        default:
          description: Default response
  "/pss/subscribe/{topic}":
    get:
      summary: Subscribe for messages on the given topic.
      tags:
        - Postal Service for Swarm
      parameters:
        - in: path
          name: topic
          schema: *a22
          required: true
          description: Topic name
      responses:
        "200":
          description: Returns a WebSocket with a subscription for incoming message data
            on the requested topic.
        "403": *a14
        "500": *a5
        default:
          description: Default response
  "/soc/{owner}/{id}":
    post:
      summary: Upload single owner chunk
      tags:
        - Single owner chunk
      parameters:
        - in: path
          name: owner
          schema:
            &a24
            type: string
            pattern: ^[A-Fa-f0-9]{40}$
            example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
          required: true
          description: Owner
        - in: path
          name: id
          schema:
            &a23
            type: string
            pattern: ^([A-Fa-f0-9]+)$
            example: cf880b8eeac5093fa27b0825906c600685
          required: true
          description: Id
        - in: query
          name: sig
          schema: *a23
          required: true
          description: Signature
        - *a10
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: *a17
        "400": *a3
        "401": *a4
        "402": *a13
        "403": *a14
        "500": *a5
        default:
          description: Default response
  "/feeds/{owner}/{topic}":
    post:
      summary: Create an initial feed root manifest
      tags:
        - Feed
      parameters:
        - in: path
          name: owner
          schema: *a24
          required: true
          description: Owner
        - in: path
          name: topic
          schema: *a23
          required: true
          description: Topic
        - in: query
          name: type
          schema:
            &a25
            type: string
            pattern: ^(sequence|epoch)$
          required: false
          description: "Feed indexing scheme (default: sequence)"
        - *a10
        - *a11
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: *a17
        "400": *a3
        "401": *a4
        "402": *a13
        "403": *a14
        "500": *a5
        default:
          description: Default response
    get:
      summary: Find feed update
      tags:
        - Feed
      parameters:
        - in: path
          name: owner
          schema: *a24
          required: true
          description: Owner
        - in: path
          name: topic
          schema: *a23
          required: true
          description: Topic
        - in: query
          name: at
          schema:
            type: integer
          required: false
          description: "Timestamp of the update (default: now)"
        - in: query
          name: type
          schema: *a25
          required: false
          description: "Feed indexing scheme (default: sequence)"
      responses:
        "200":
          description: Latest feed update
          headers:
            swarm-feed-index:
              description: The index of the found update
              schema:
                type: string
                pattern: ^([A-Fa-f0-9]+)$
                example: cf880b8eeac5093fa27b0825906c600685
            swarm-feed-index-next:
              description: The index of the next possible update
              schema:
                type: string
                pattern: ^([A-Fa-f0-9]+)$
                example: cf880b8eeac5093fa27b0825906c600685
          content:
            application/json:
              schema: *a17
        "400": *a3
        "401": *a4
        "500": *a5
        default:
          description: Default response
  "/stewardship/{reference}":
    get:
      summary: Check if content is available
      tags:
        - Stewardship
      parameters:
        - in: path
          name: reference
          schema: *a7
          required: true
          description: "Root hash of content (can be of any type: collection, file, chunk)"
      responses:
        "200":
          description: Returns if the content is retrievable
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRetrievable:
                    type: boolean
        "404": *a8
        "500": *a5
        default:
          description: Default response
    put:
      summary: Reupload a root hash to the network
      tags:
        - Stewardship
      parameters:
        - in: path
          name: reference
          schema: *a7
          required: true
          description: "Root hash of content (can be of any type: collection, file, chunk)"
      responses:
        "200":
          description: Ok
        "404": *a8
        "500": *a5
        default:
          description: Default response
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: SecurityToken
