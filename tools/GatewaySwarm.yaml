openapi: 3.0.3
info:
  version: 7.3.0
  title: Bee API
  description: A list of the currently provided Interfaces to interact with the
    swarm, implementing file operations and sending messages
security:
  - {}
externalDocs:
  description: Browse the documentation @ the Swarm Docs
  url: https://docs.ethswarm.org
servers:
  - url: http://{apiRoot}:{port}/v1
    variables:
      apiRoot:
        default: localhost
        description: Base address of the local bee node main API
      port:
        default: "1633"
        description: Service port provided in bee node config
  - url: http://{apiRoot}:{port}
    variables:
      apiRoot:
        default: localhost
        description: Base address of the local bee node main API
      port:
        default: "1633"
        description: Service port provided in bee node config
paths:
  /grantee:
    post:
      summary: Create grantee list
      tags:
        - ACT
      parameters:
        - in: header
          schema:
            &a5
            in: header
            name: swarm-postage-batch-id
            description: ID of Postage Batch that is used to upload data with
            schema:
              type: string
              pattern: ^[A-Fa-f0-9]{64}$
              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
          name: swarm-postage-batch-id
          required: true
        - in: header
          schema:
            &a6
            in: header
            name: swarm-tag
            schema:
              &a12
              type: integer
              format: int64
            description: Associate upload with an existing Tag UID
          name: swarm-tag
          required: false
        - in: header
          schema:
            &a7
            in: header
            name: swarm-pin
            schema:
              type: boolean
            description: >
              Represents if the uploaded data should be also locally pinned on
              the node.
          name: swarm-pin
          required: false
        - in: header
          schema:
            &a8
            in: header
            name: swarm-deferred-upload
            schema:
              type: boolean
              default: "true"
            description: >
              Determines if the uploaded data should be sent to the network
              immediately or in a deferred fashion. By default the upload will
              be deferred.
          name: swarm-deferred-upload
          required: false
        - in: header
          schema:
            &a4
            in: header
            name: swarm-act-history-address
            schema:
              type: string
              pattern: ^[A-Fa-f0-9]{64}$
              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
            description: ACT history reference address
          name: swarm-act-history-address
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grantees:
                  type: array
                  items:
                    type: string
                    pattern: ^[A-Fa-f0-9]{66}$
                    example: 02ab7473879005929d10ce7d4f626412dad9fe56b0a6622038931d26bd79abf0a4
      responses:
        "201":
          description: Ok
          content:
            application/json:
              schema:
                &a10
                type: object
                properties:
                  ref:
                    &a1
                    type: string
                    pattern: ^[A-Fa-f0-9]{128}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
                  historyref: *a1
        "400":
          &a11
          description: Bad request
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  reasons:
                    type: array
                    nullable: true
                    description: List of reasons for the error message.
                    items:
                      type: string
        "500":
          &a2
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  reasons:
                    type: array
                    nullable: true
                    description: List of reasons for the error message.
                    items:
                      type: string
  "/grantee/{reference}":
    get:
      summary: Get grantee list
      tags:
        - ACT
      parameters:
        - in: path
          name: reference
          schema:
            &a3
            type: string
            pattern: ^[A-Fa-f0-9]{128}$
            example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
          required: true
          description: Grantee list reference
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  pattern: ^[A-Fa-f0-9]{66}$
                  example: 02ab7473879005929d10ce7d4f626412dad9fe56b0a6622038931d26bd79abf0a4
        "404":
          &a16
          description: Not Found
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  reasons:
                    type: array
                    nullable: true
                    description: List of reasons for the error message.
                    items:
                      type: string
        "500": *a2
    patch:
      summary: Update grantee list
      description: Add or remove grantees from an existing grantee list
      tags:
        - ACT
      parameters:
        - in: path
          name: reference
          schema: *a3
          required: true
          description: Grantee list reference
        - in: header
          schema: *a4
          name: swarm-act-history-address
          required: true
        - in: header
          schema: *a5
          name: swarm-postage-batch-id
          required: true
        - in: header
          schema: *a6
          name: swarm-tag
          required: false
        - in: header
          schema: *a7
          name: swarm-pin
          required: false
        - in: header
          schema: *a8
          name: swarm-deferred-upload
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                add:
                  type: array
                  items:
                    &a9
                    type: string
                    pattern: ^[A-Fa-f0-9]{66}$
                    example: 02ab7473879005929d10ce7d4f626412dad9fe56b0a6622038931d26bd79abf0a4
                  description: List of grantees to add
                revoke:
                  type: array
                  items: *a9
                  description: List of grantees to revoke future access from
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema: *a10
        "400": *a11
        "500": *a2
  /bytes:
    post:
      summary: Upload data
      tags:
        - Bytes
      parameters:
        - in: header
          schema: *a5
          name: swarm-postage-batch-id
          required: true
        - in: header
          schema: *a6
          name: swarm-tag
          required: false
        - in: header
          schema: *a7
          name: swarm-pin
          required: false
        - in: header
          schema: *a8
          name: swarm-deferred-upload
          required: false
        - in: header
          schema:
            &a19
            in: header
            name: swarm-encrypt
            schema:
              type: boolean
            description: |
              Represents the encrypting state of the file
          name: swarm-encrypt
          required: false
        - in: header
          schema:
            &a13
            in: header
            name: swarm-redundancy-level
            schema:
              type: integer
              enum:
                - 0
                - 1
                - 2
                - 3
                - 4
            description: >
              Add redundancy to the data being uploaded so that downloaders can
              download it with better UX. 0 value is default and does not add
              any redundancy to the file.
          name: swarm-redundancy-level
          required: false
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Ok
          headers:
            swarm-tag:
              &a21
              description: Tag UID
              schema: *a12
          content:
            application/json:
              schema:
                &a17
                type: object
                properties:
                  reference:
                    oneOf:
                      - type: string
                        pattern: ^[A-Fa-f0-9]{64}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                      - type: string
                        pattern: ^[A-Fa-f0-9]{128}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
                      - type: string
                        pattern: ^[A-Za-z0-9]+\.[A-Za-z0-9]+$
                        example: swarm.eth
        "400": *a11
        "402":
          &a18
          description: Payment Required
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  reasons:
                    type: array
                    nullable: true
                    description: List of reasons for the error message.
                    items:
                      type: string
        "500": *a2
        default:
          description: Default response
  "/bytes/{reference}":
    get:
      summary: Get referenced data
      tags:
        - Bytes
      parameters:
        - in: path
          name: reference
          schema:
            &a23
            oneOf:
              - type: string
                pattern: ^[A-Fa-f0-9]{64}$
                example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
              - type: string
                pattern: ^[A-Fa-f0-9]{128}$
                example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
              - type: string
                pattern: ^[A-Za-z0-9]+\.[A-Za-z0-9]+$
                example: swarm.eth
          required: true
          description: Swarm address reference to content
        - &a24
          in: header
          name: swarm-cache
          schema:
            type: boolean
            default: "true"
          description: Determines if the download data should be cached on the node. By
            default the download will be cached
        - &a25
          in: header
          name: swarm-redundancy-strategy
          schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
              - 3
          required: false
          description: >
            Specify the retrieve strategy on redundant data. The numbers stand
            for NONE, DATA, PROX and RACE, respectively. Strategy NONE means no
            prefetching takes place. Strategy DATA means only data chunks are
            prefetched. Strategy PROX means only chunks that are close to the
            node are prefetched. Strategy RACE means all chunks are prefetched:
            n data chunks and k parity chunks. The first n chunks to arrive are
            used to reconstruct the file. Multiple strategies can be used in a
            fallback cascade if the swarm redundancy fallback mode is set to
            true. The default strategy is NONE, DATA, falling back to PROX,
            falling back to RACE
        - &a26
          in: header
          name: swarm-redundancy-fallback-mode
          schema:
            type: boolean
          required: false
          description: >
            Specify if the retrieve strategies (chunk prefetching on redundant
            data) are used in a fallback cascade. The default is true.
        - *a13
        - &a27
          in: header
          name: swarm-chunk-retrieval-timeout
          schema:
            description: Go time.Duration format
            type: string
            example: 5.0018ms
          required: false
          description: |
            Specify the timeout for chunk retrieval. The default is 30 seconds.
        - &a14
          in: header
          name: swarm-act-timestamp
          schema:
            type: integer
            format: int64
          required: false
          description: ACT history Unix timestamp
        - &a15
          in: header
          name: swarm-act-publisher
          schema:
            type: string
            pattern: ^[A-Fa-f0-9]{66}$
            example: 02ab7473879005929d10ce7d4f626412dad9fe56b0a6622038931d26bd79abf0a4
          required: false
          description: ACT content publisher's public key
        - *a4
      responses:
        "200":
          description: Retrieved content specified by reference
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a11
        default:
          description: Default response
    head:
      summary: Requests the headers containing the content type and length for the
        reference
      tags:
        - Bytes
      parameters:
        - in: path
          name: address
          schema:
            &a42
            type: string
            pattern: ^[A-Fa-f0-9]{64}$
            example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
          required: true
          description: Swarm address of chunk
        - *a14
        - *a15
        - *a4
      responses:
        "200":
          description: The chunk exists.
          headers:
            Content-Type:
              description: The MIME type of the resource (e.g., application/octet-stream).
              schema:
                type: string
                example: application/octet-stream
            Content-Length:
              description: The size of the chunk in bytes.
              schema:
                type: integer
                example: 1024
            Access-Control-Expose-Headers:
              description: Headers exposed for CORS.
              schema:
                type: string
                example: Accept-Ranges, Content-Encoding
        "400": *a11
        "404": *a16
        default:
          description: Default response
  /chunks:
    post:
      summary: Upload chunk
      tags:
        - Chunk
      parameters:
        - *a6
        - in: header
          name: swarm-postage-batch-id
          schema: *a5
          required: false
        - &a34
          in: header
          name: swarm-postage-stamp
          description: |
            Postage stamp for the corresponding chunk in the request. \
            It is required if Swarm-Postage-Batch-Id header is missing \
            It consists of: \
            - batch ID - 0:32 bytes \
            - postage index (bucket and bucket index) - 32:40 bytes \
            - timestamp - 40:48 bytes \
            - signature - 48:113 bytes
          schema:
            type: string
            pattern: ^([A-Fa-f0-9]+)$
            example: cf880b8eeac5093fa27b0825906c600685
        - &a20
          in: header
          name: swarm-act
          schema:
            type: boolean
            default: "false"
          required: false
          description: Determines if the uploaded data should be treated as ACT content
        - *a4
      requestBody:
        description: Chunk binary data that has to have at least 8 bytes.
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Ok
          headers:
            swarm-tag:
              description: Tag UID if it was passed to the request `swarm-tag` header.
              schema:
                &a28
                type: integer
                format: int64
            swarm-act-history-address:
              &a22
              description: Swarm address reference to the new ACT history entry
              schema:
                type: string
                pattern: ^[A-Fa-f0-9]{64}$
                example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
              required: false
          content:
            application/json:
              schema: *a17
        "400": *a11
        "402": *a18
        "500": *a2
        default:
          description: Default response
  /chunks/stream:
    get:
      summary: Upload stream of chunks
      description: Returns a WebSocket connection on which stream of chunks can be
        uploaded. Each chunk sent is acknowledged using a binary response `0`
        which serves as confirmation of upload of single chunk. Chunks should be
        packaged as binary messages for uploading. If a tag is specified, the
        chunks will be streamed into local storage and then be uploaded to the
        network once the stream is closed. If a tag is not specified, the chunks
        will bypass local storage and be directly uploaded to the network
        through the stream as they arrive.
      tags:
        - Chunk
      parameters:
        - *a6
        - *a5
      responses:
        "200":
          description: Connection established
        "400": *a11
        default:
          description: Default response
  /bzz:
    post:
      summary: Upload file or a collection of files
      description: >-
        In order to upload a collection, user can send a multipart request with
        all the files populated in the form data with appropriate headers.

         User can also upload a tar file along with the swarm-collection header. This will upload the tar file after extracting the entire directory structure.

         If the swarm-collection header is absent, all requests (including tar files) are considered as single file uploads.

         A multipart request is treated as a collection regardless of whether the swarm-collection header is present. This means in order to serve single files uploaded as a multipart request, the swarm-index-document header should be used with the name of the file.
      tags:
        - BZZ
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Filename when uploading single file
        - *a6
        - *a7
        - *a19
        - in: header
          name: Content-Type
          schema:
            type: string
          description: The specified content-type is preserved for download of the asset
        - in: header
          name: swarm-collection
          schema:
            type: boolean
          required: false
          description: Upload file/files as a collection
        - in: header
          name: swarm-index-document
          schema:
            type: string
            example: index.html
          required: false
          description: Default file to be referenced on path, if exists under that path
        - in: header
          name: swarm-error-document
          schema:
            type: string
            example: error.html
          required: false
          description: Configure custom error document to be returned when a specified
            path can not be found in collection
        - *a5
        - *a8
        - *a13
        - *a20
        - *a4
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
          application/x-tar:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Ok
          headers:
            swarm-tag: *a21
            etag:
              description: >
                The RFC7232 ETag header field in a response provides the current
                entity-

                tag for the selected resource. An entity-tag is an opaque identifier for

                different versions of a resource over time, regardless whether multiple

                versions are valid at the same time. An entity-tag consists of an opaque

                quoted string, possibly prefixed by a weakness indicator.
              schema:
                type: string
            swarm-act-history-address: *a22
          content:
            application/json:
              schema: *a17
        "400": *a11
        "402": *a18
        "500": *a2
        default:
          description: Default response
  "/bzz/{reference}/":
    get:
      summary: Get file or index document from a collection of files
      tags:
        - BZZ
      parameters:
        - in: path
          name: reference
          schema: *a23
          required: true
          description: Swarm address of content
        - *a24
        - *a25
        - *a26
        - *a13
        - *a27
        - *a14
        - *a15
        - *a4
      responses:
        "200":
          description: Ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
    head:
      summary: Get the headers containing the content type and length for the reference
      tags:
        - BZZ
      parameters:
        - in: path
          name: reference
          schema: *a23
          required: true
          description: Swarm address of content
        - *a14
        - *a15
        - *a4
      responses:
        "200":
          description: Chunk exists
        "400": *a11
        "404": *a16
        default:
          description: Default response
  "/bzz/{reference}/{path}":
    get:
      summary: Get referenced file from a collection of files
      tags:
        - BZZ
      parameters:
        - in: path
          name: reference
          schema: *a23
          required: true
          description: Swarm address of content
        - in: path
          name: path
          schema:
            type: string
          required: true
          description: Path to the file in the collection.
        - *a25
        - *a26
        - *a27
      responses:
        "200":
          description: Ok
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
    head:
      summary: Get the headers containing the content type and length for the reference
      tags:
        - BZZ
      parameters:
        - in: path
          name: reference
          schema: *a23
          required: true
          description: Swarm address of content
        - in: path
          name: path
          schema:
            type: string
          required: true
          description: Path to the file in the collection.
      responses:
        "200":
          description: Chunk exists
        "400": *a11
        "404": *a16
        default:
          description: Default response
  /tags:
    get:
      summary: Get list of tags
      tags:
        - Tag
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            format: int64
            minimum: 0
            default: 0
          required: false
          description: The number of items to skip before starting to collect the result
            set.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          required: false
          description: The numbers of items to return.
      responses:
        "200":
          description: List of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    nullable: true
                    items:
                      type: object
                      properties:
                        uid:
                          type: integer
                          format: int64
                        startedAt:
                          type: string
                          format: date-time
                          example: 2020-06-11T11:26:42.6969797+02:00
                        split:
                          type: integer
                          description: Number of chunks created by the splitter.
                        seen:
                          type: integer
                          description: Number of chunks that are already uploaded with same reference and
                            same postage batch. These don't need to be synced
                            again.
                        stored:
                          type: integer
                          description: Number of chunks that were stored locally as they lie in the
                            uploader node's neighborhood. This is only
                            applicable for full nodes.
                        sent:
                          type: integer
                          description: Number of chunks sent on the network to peers as a part of the
                            upload. Chunks could be sent multiple times because
                            of failures or replication.
                        synced:
                          type: integer
                          description: Number of chunks that were pushed with a valid receipt. The receipt
                            will also show if they were stored at the correct
                            depth.
        "500": *a2
        default:
          description: Default response
    post:
      summary: Create Tag
      tags:
        - Tag
      description: Tags can be thought of as upload sessions which can be tracked
        using the tags endpoint. It will keep track of the chunks that are
        uploaded as part of the tag and will push them out to the network once a
        done split is called on the Tag. This happens internally if you use the
        `Swarm-Deferred-Upload` header.
      parameters:
        - *a5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  pattern: ^[A-Fa-f0-9]{64}$
                  example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
      responses:
        "201":
          description: New Tag Info
          content:
            application/json:
              schema:
                &a29
                type: object
                properties:
                  uid:
                    type: integer
                    format: int64
                  startedAt:
                    type: string
                    format: date-time
                    example: 2020-06-11T11:26:42.6969797+02:00
                  split:
                    type: integer
                    description: Number of chunks created by the splitter.
                  seen:
                    type: integer
                    description: Number of chunks that are already uploaded with same reference and
                      same postage batch. These don't need to be synced again.
                  stored:
                    type: integer
                    description: Number of chunks that were stored locally as they lie in the
                      uploader node's neighborhood. This is only applicable for
                      full nodes.
                  sent:
                    type: integer
                    description: Number of chunks sent on the network to peers as a part of the
                      upload. Chunks could be sent multiple times because of
                      failures or replication.
                  synced:
                    type: integer
                    description: Number of chunks that were pushed with a valid receipt. The receipt
                      will also show if they were stored at the correct depth.
        "500": *a2
        default:
          description: Default response
  "/tags/{uid}":
    get:
      summary: Get Tag information using Uid
      tags:
        - Tag
      parameters:
        - in: path
          name: uid
          schema: *a28
          required: true
          description: Uid
      responses:
        "200":
          description: Tag info
          content:
            application/json:
              schema: *a29
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
    delete:
      summary: Delete Tag information using Uid
      tags:
        - Tag
      parameters:
        - in: path
          name: uid
          schema: *a28
          required: true
          description: Uid
        - *a5
      responses:
        "204":
          description: The resource was deleted successfully.
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
    patch:
      summary: Update Total Count and swarm hash for a tag of an input stream of
        unknown size using Uid
      tags:
        - Tag
      parameters:
        - in: path
          name: uid
          schema: *a28
          required: true
          description: Uid
        - *a5
      requestBody:
        description: Can contain swarm hash to use for the tag
        required: false
        content:
          application/json:
            schema:
              &a47
              type: object
              properties:
                address:
                  type: string
                  pattern: ^[A-Fa-f0-9]{64}$
                  example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                &a30
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
        "404": *a16
        "500": *a2
        default:
          description: Default response
  "/pins/{reference}":
    parameters:
      - in: path
        name: reference
        schema:
          &a31
          oneOf:
            - type: string
              pattern: ^[A-Fa-f0-9]{64}$
              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
            - type: string
              pattern: ^[A-Fa-f0-9]{128}$
              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
        required: true
        description: Swarm reference of the root hash
    post:
      summary: Pin the root hash with the given reference
      tags:
        - Pinning
      responses:
        "200":
          description: Pin already exists, so no operation
          content:
            application/json:
              schema: *a30
        "201":
          description: New pin with root reference was created
          content:
            application/json:
              schema: *a30
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
    delete:
      summary: Unpin the root hash with the given reference
      tags:
        - Pinning
      responses:
        "200":
          description: Unpinning root hash with reference
          content:
            application/json:
              schema: *a30
        "400": *a11
        "500": *a2
        default:
          description: Default response
    get:
      summary: Get pinning status of the root hash with the given reference
      tags:
        - Pinning
      responses:
        "200":
          description: Reference of the pinned root hash
          content:
            application/json:
              schema:
                type: object
                properties:
                  reference:
                    oneOf:
                      - type: string
                        pattern: ^[A-Fa-f0-9]{64}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                      - type: string
                        pattern: ^[A-Fa-f0-9]{128}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
  /pins:
    get:
      summary: Get the list of pinned root hash references
      tags:
        - Pinning
      responses:
        "200":
          description: List of pinned root hash references
          content:
            application/json:
              schema:
                type: object
                properties:
                  references:
                    type: array
                    nullable: true
                    items:
                      oneOf:
                        - type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                        - type: string
                          pattern: ^[A-Fa-f0-9]{128}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
        "500": *a2
        default:
          description: Default response
  /pins/check:
    get:
      summary: Validate pinned chunks integerity
      tags:
        - Pinning
      parameters:
        - in: query
          name: ref
          schema: *a31
          required: false
          description: The number of items to skip before starting to collect the result
            set.
      responses:
        "200":
          description: List of checked root hash references
          content:
            application/json:
              schema:
                type: object
                properties:
                  reference:
                    oneOf:
                      - type: string
                        pattern: ^[A-Fa-f0-9]{64}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                      - type: string
                        pattern: ^[A-Fa-f0-9]{128}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2
                  total:
                    type: integer
                  missing:
                    type: integer
                  invalid:
                    type: integer
        "500": *a2
        default:
          description: Default response
  "/pss/send/{topic}/{targets}":
    post:
      summary: Send to recipient or target with Postal Service for Swarm
      tags:
        - Postal Service for Swarm
      parameters:
        - in: path
          name: topic
          schema:
            &a32
            type: string
          required: true
          description: Topic name
        - in: path
          name: targets
          schema:
            pattern: ^[0-9a-fA-F]{1,6}(,[0-9a-fA-F]{1,6})*$
            description: List of hex string targets that are comma separated and can have
              maximum length of 6
            type: string
          required: true
          description: Target message address prefix. If multiple targets are specified,
            only one would be matched.
        - in: query
          name: recipient
          schema:
            type: string
          required: false
          description: Recipient publickey
        - *a5
      responses:
        "201":
          description: Subscribed to topic
        "400": *a11
        "402": *a18
        "500": *a2
        default:
          description: Default response
  "/pss/subscribe/{topic}":
    get:
      summary: Subscribe for messages on the given topic.
      tags:
        - Postal Service for Swarm
      parameters:
        - in: path
          name: topic
          schema: *a32
          required: true
          description: Topic name
      responses:
        "200":
          description: Returns a WebSocket with a subscription for incoming message data
            on the requested topic.
        "500": *a2
        default:
          description: Default response
  "/gsoc/subscribe/{address}":
    get:
      summary: Subscribe to GSOC payloads
      tags:
        - GSOC
      parameters:
        - in: path
          name: reference
          schema: *a23
          required: true
          description: Single Owner Chunk address (which may have multiple payloads)
      responses:
        "200":
          description: Returns a WebSocket with a subscription for incoming message data
            on the requested SOC address.
        "500": *a2
        default:
          description: Default response
  "/soc/{owner}/{id}":
    post:
      summary: Upload single owner chunk
      tags:
        - Single owner chunk
      parameters:
        - in: path
          name: owner
          schema:
            &a35
            type: string
            pattern: ^[A-Fa-f0-9]{40}$
            example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
          required: true
          description: Owner
        - in: path
          name: id
          schema:
            &a33
            type: string
            pattern: ^([A-Fa-f0-9]+)$
            example: cf880b8eeac5093fa27b0825906c600685
          required: true
          description: Id
        - in: query
          name: sig
          schema: *a33
          required: true
          description: Signature
        - in: header
          name: swarm-postage-batch-id
          schema: *a5
          required: true
        - *a34
        - *a20
        - *a4
      requestBody:
        required: true
        description: The SOC binary data is composed of the span (8 bytes) and the at
          most 4KB payload.
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: *a17
          headers:
            swarm-act-history-address: *a22
        "400": *a11
        "401":
          &a36
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  reasons:
                    type: array
                    nullable: true
                    description: List of reasons for the error message.
                    items:
                      type: string
        "402": *a18
        "500": *a2
        default:
          description: Default response
    get:
      summary: Resolve Single Owner Chunk data
      tags:
        - Single owner chunk
      parameters:
        - in: path
          name: owner
          schema: *a35
          required: true
          description: Ethereum address of the Owner of the SOC
        - in: path
          name: id
          schema: *a33
          required: true
          description: Arbitrary identifier of the related data
        - &a38
          in: header
          name: swarm-only-root-chunk
          schema:
            type: boolean
          required: false
          description: Returns only the root chunk of the content
        - *a24
        - *a25
        - *a26
        - *a27
      responses:
        "200":
          description: Related Single Owner Chunk data
          headers:
            swarm-soc-signature:
              &a39
              description: Attached digital signature of the Single Owner Chunk
              schema:
                type: string
                pattern: ^([A-Fa-f0-9]+)$
                example: cf880b8eeac5093fa27b0825906c600685
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a11
        "401": *a36
        "500": *a2
        default:
          description: Default response
  "/feeds/{owner}/{topic}":
    post:
      summary: Create an initial feed root manifest
      tags:
        - Feed
      parameters:
        - in: path
          name: owner
          schema: *a35
          required: true
          description: Owner
        - in: path
          name: topic
          schema: *a33
          required: true
          description: Topic
        - in: query
          name: type
          schema:
            &a37
            type: string
            pattern: ^(sequence|epoch)$
          required: false
          description: "Feed indexing scheme (default: sequence)"
        - *a7
        - *a5
        - *a20
        - *a4
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: *a17
          headers:
            swarm-act-history-address: *a22
        "400": *a11
        "401": *a36
        "402": *a18
        "500": *a2
        default:
          description: Default response
    get:
      summary: Find feed update
      tags:
        - Feed
      parameters:
        - in: path
          name: owner
          schema: *a35
          required: true
          description: Owner
        - in: path
          name: topic
          schema: *a33
          required: true
          description: Topic
        - in: query
          name: at
          schema:
            type: integer
            format: int64
          required: false
          description: "Timestamp of the update (default: now)"
        - in: query
          name: after
          schema:
            type: integer
            format: int64
          required: false
          description: "Start index (default: 0)"
        - in: query
          name: type
          schema: *a37
          required: false
          description: "Feed indexing scheme (default: sequence)"
        - *a38
        - *a24
        - *a25
        - *a26
        - *a27
      responses:
        "200":
          description: Latest feed update
          headers:
            swarm-soc-signature: *a39
            swarm-feed-index:
              description: The index of the found update
              schema:
                type: string
                pattern: ^([A-Fa-f0-9]+)$
                example: cf880b8eeac5093fa27b0825906c600685
            swarm-feed-index-next:
              description: The index of the next possible update
              schema:
                type: string
                pattern: ^([A-Fa-f0-9]+)$
                example: cf880b8eeac5093fa27b0825906c600685
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a11
        "401": *a36
        "500": *a2
        default:
          description: Default response
  "/stewardship/{reference}":
    get:
      summary: Check if content is available
      tags:
        - Stewardship
      parameters:
        - in: path
          name: reference
          schema: *a23
          required: true
          description: "Root hash of content (can be of any type: collection, file, chunk)"
      responses:
        "200":
          description: Returns if the content is retrievable
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRetrievable:
                    type: boolean
        "404": *a16
        "500": *a2
        default:
          description: Default response
    put:
      summary: Re-upload content for specified root hash
      tags:
        - Stewardship
      parameters:
        - in: path
          name: reference
          schema: *a23
          required: true
          description: "Re-uploads content for specified root hash (can be of any type:
            collection, file, chunk, etc.)"
        - in: header
          schema: *a5
          name: swarm-postage-batch-id
          description: Postage batch to use for re-upload. If none is provided and the
            file was uploaded on the same node before, it will reuse the same
            batch. If not found, it will return error. If a new batch is
            provided, the chunks are stamped again with the new batch.
      responses:
        "200":
          description: Ok
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
  /addresses:
    get:
      summary: Get overlay and underlay addresses of the node
      tags:
        - Connectivity
      responses:
        "200":
          description: Own node underlay and overlay addresses
          content:
            application/json:
              schema:
                type: object
                properties:
                  overlay:
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  underlay:
                    type: array
                    items:
                      type: string
                      example: /ip4/127.0.0.1/tcp/1634/p2p/16Uiu2HAmTm17toLDaPYzRyjKn27iCB76yjKnJ5DjQXneFmifFvaX
                  ethereum:
                    &a40
                    type: string
                    pattern: ^[A-Fa-f0-9]{40}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                  chain_address: *a40
                  publicKey:
                    &a41
                    type: string
                    pattern: ^[A-Fa-f0-9]{66}$
                    example: 02ab7473879005929d10ce7d4f626412dad9fe56b0a6622038931d26bd79abf0a4
                  pssPublicKey: *a41
        "500": *a2
        default:
          description: Default response
  /health:
    get:
      summary: Get node overall health Status
      description: |
        Health Status will indicate node healthiness.

        If node is unhealthy please check node logs for errors.
      tags:
        - Status
      responses:
        "200":
          description: Health Status of node
          content:
            application/json:
              schema:
                &a53
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
                      - nok
                      - unknown
                    description: >
                      Indicates health state of node * `ok` - node is healthy *
                      `nok` - node is not healthy * `unknown` - health status is
                      unknown
                  version:
                    type: string
                  apiVersion:
                    type: string
                    default: 0.0.0
                    description: The default value is set in case the bee binary was not build
                      correctly.
        default:
          description: Default response
  /readiness:
    get:
      summary: Readiness endpoint indicates if node is ready to start accepting traffic
      tags:
        - Status
      responses:
        "200":
          description: OK.
        "400": *a11
        default:
          description: Default response
  /balances:
    get:
      summary: Get the balances with all known peers including prepaid services
      security:
        - bearerAuth: []
      tags:
        - Balance
      responses:
        "200":
          description: Own balances with all known peers
          content:
            application/json:
              schema:
                &a43
                type: object
                properties:
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        peer:
                          type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                        balance:
                          description: Numeric string that represents integer which might exceed
                            `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                          type: string
                          example: "1000000000000000000"
        "500": *a2
        default:
          description: Default response
  "/balances/{address}":
    get:
      summary: Get the balances with a specific peer including prepaid services
      security:
        - bearerAuth: []
      tags:
        - Balance
      parameters:
        - in: path
          name: address
          schema: *a42
          required: true
          description: Swarm address of peer
      responses:
        "200":
          description: Balance with the specific peer
          content:
            application/json:
              schema:
                &a44
                type: object
                properties:
                  peer:
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  balance:
                    description: Numeric string that represents integer which might exceed
                      `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                    type: string
                    example: "1000000000000000000"
        "400": *a11
        "500": *a2
        default:
          description: Default response
  /blocklist:
    get:
      summary: Get a list of blocklisted peers
      security:
        - bearerAuth: []
      tags:
        - Connectivity
      responses:
        "200":
          description: Returns overlay addresses of blocklisted peers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: object
                      properties:
                        address:
                          type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                    fullNode:
                      type: boolean
                    reason:
                      type: string
                    duration:
                      type: integer
        "500": *a2
        default:
          description: Default response
  /consumed:
    get:
      summary: Get the past due consumption balances with all known peers
      security:
        - bearerAuth: []
      tags:
        - Balance
      responses:
        "200":
          description: Own past due consumption balances with all known peers
          content:
            application/json:
              schema: *a43
        "500": *a2
        default:
          description: Default response
  "/consumed/{address}":
    get:
      summary: Get the past due consumption balance with a specific peer
      security:
        - bearerAuth: []
      tags:
        - Balance
      parameters:
        - in: path
          name: address
          schema: *a42
          required: true
          description: Swarm address of peer
      responses:
        "200":
          description: Past-due consumption balance with the specific peer
          content:
            application/json:
              schema: *a44
        "400": *a11
        "500": *a2
        default:
          description: Default response
  /chequebook/address:
    get:
      summary: Get the address of the chequebook contract used
      security:
        - bearerAuth: []
      tags:
        - Chequebook
      responses:
        "200":
          description: Ethereum address of chequebook contract
          content:
            application/json:
              schema:
                type: object
                properties:
                  chequebookAddress:
                    type: string
                    pattern: ^[A-Fa-f0-9]{40}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
  /chequebook/balance:
    get:
      summary: Get the balance of the chequebook
      security:
        - bearerAuth: []
      tags:
        - Chequebook
      responses:
        "200":
          description: Balance of the chequebook
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalBalance:
                    &a45
                    description: Numeric string that represents integer which might exceed
                      `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                    type: string
                    example: "1000000000000000000"
                  availableBalance: *a45
        "500": *a2
        default:
          description: Default response
  "/chunks/{reference}":
    get:
      summary: Get chunk
      tags:
        - Chunk
      parameters:
        - in: path
          name: reference
          schema: *a23
          required: true
          description: Swarm address of chunk
        - in: header
          schema: *a24
          name: swarm-cache
          required: false
        - *a14
        - *a15
        - *a4
      responses:
        "200":
          description: Retrieved chunk content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
    head:
      summary: Check if chunk at address exists locally
      tags:
        - Chunk
      parameters:
        - in: path
          name: address
          schema: *a42
          required: true
          description: Swarm address of chunk
        - *a14
        - *a15
        - *a4
      responses:
        "200":
          description: Chunk exists
        "400": *a11
        "404": *a16
        default:
          description: Default response
  "/envelope/{address}":
    post:
      summary: Create postage stamp signature against given chunk address
      tags:
        - Envelope
      parameters:
        - in: header
          name: swarm-postage-batch-id
          schema: *a5
          required: true
      responses:
        "201":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    pattern: ^[A-Fa-f0-9]{40}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                  index:
                    &a46
                    description: Hexadecimal string representation of 8 bytes
                    type: string
                    pattern: ^([0-9a-fA-F]{16})$
                    example: 1a2b3c4d5e6f7a8b
                  timestamp: *a46
                  signature:
                    description: Hexadecimal string representation of cryptographic signature
                    type: string
                    pattern: ^([0-9a-fA-F]{130})$
                    example: 1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e
        "400": *a11
        "402": *a18
        "500": *a2
        default:
          description: Default response
  "/connect/{multiAddress}":
    post:
      summary: Connect to address
      security:
        - bearerAuth: []
      tags:
        - Connectivity
      parameters:
        - in: path
          allowReserved: true
          name: multiAddress
          schema:
            type: string
          required: true
          description: Underlay address of peer
      responses:
        "200":
          description: Returns overlay address of connected peer
          content:
            application/json:
              schema: *a47
        "400": *a11
        "500": *a2
        default:
          description: Default response
  /reservestate:
    get:
      summary: Get reserve state
      security:
        - bearerAuth: []
      tags:
        - Status
      responses:
        "200":
          description: Reserve State
          content:
            application/json:
              schema:
                type: object
                properties:
                  radius:
                    type: integer
                  storageRadius:
                    type: integer
                  commitment:
                    type: integer
                    format: int64
        default:
          description: Default response
  /chainstate:
    get:
      summary: Get chain state
      security:
        - bearerAuth: []
      tags:
        - Status
      responses:
        "200":
          description: Chain State
          content:
            application/json:
              schema:
                type: object
                properties:
                  chainTip:
                    type: integer
                  block:
                    type: integer
                    format: int64
                  totalAmount:
                    &a48
                    description: Numeric string that represents integer which might exceed
                      `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                    type: string
                    example: "1000000000000000000"
                  currentPrice: *a48
        default:
          description: Default response
  /node:
    get:
      summary: Get information about the node
      tags:
        - Status
      responses:
        "200":
          description: Information about the node
          content:
            application/json:
              schema:
                type: object
                properties:
                  beeMode:
                    type: string
                    enum:
                      - light
                      - full
                      - dev
                      - ultra-light
                      - unknown
                    description: >
                      Gives back in what mode the Bee client has been started.
                      The modes are mutually exclusive * `light` - light node;
                      does not participate in forwarding or storing chunks *
                      `full` - full node * `dev` - development mode; Bee client
                      for development purposes, blockchain operations are mocked
                      * `ultra-light` - ultra-light node; a light node with
                      chain disabled * `unknown` - unknown mode
                  chequebookEnabled:
                    type: boolean
                  swapEnabled:
                    type: boolean
        default:
          description: Default response
  /peers:
    get:
      summary: Get a list of peers
      security:
        - bearerAuth: []
      tags:
        - Connectivity
      responses:
        "200":
          description: Returns overlay addresses of connected peers
          content:
            application/json:
              schema:
                type: object
                properties:
                  peers:
                    type: array
                    nullable: false
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
        default:
          description: Default response
  "/peers/{address}":
    delete:
      summary: Remove peer
      security:
        - bearerAuth: []
      tags:
        - Connectivity
      parameters:
        - in: path
          name: address
          schema: *a42
          required: true
          description: Swarm address of peer
      responses:
        "200":
          description: Disconnected peer
          content:
            application/json:
              schema: *a30
        "400": *a11
        "500": *a2
        default:
          description: Default response
  "/pingpong/{address}":
    post:
      summary: Try connection to node
      security:
        - bearerAuth: []
      tags:
        - Connectivity
      parameters:
        - in: path
          name: address
          schema: *a42
          required: true
          description: Swarm address of peer
      responses:
        "200":
          description: Returns round trip time for given peer
          content:
            application/json:
              schema:
                type: object
                properties:
                  rtt:
                    description: Go time.Duration format
                    type: string
                    example: 5.0018ms
        "400": *a11
        "404": *a16
        "500": *a2
        default:
          description: Default response
  "/settlements/{address}":
    get:
      summary: Get amount of sent and received from settlements with a peer
      security:
        - bearerAuth: []
      tags:
        - Settlements
      parameters:
        - in: path
          name: address
          schema: *a42
          required: true
          description: Swarm address of peer
      responses:
        "200":
          description: Amount of sent or received from settlements with a peer
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  received:
                    type: string
                  sent:
                    type: string
        "400": *a11
        "500": *a2
        default:
          description: Default response
  /settlements:
    get:
      summary: Get settlements with all known peers and total amount sent or received
      security:
        - bearerAuth: []
      tags:
        - Settlements
      responses:
        "200":
          description: Settlements with all known peers and total amount sent or received
          content:
            application/json:
              schema:
                &a49
                type: object
                properties:
                  totalReceived:
                    type: string
                  totalSent:
                    type: string
                  settlements:
                    type: array
                    nullable: false
                    items:
                      type: object
                      properties:
                        peer:
                          type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                        received:
                          type: string
                        sent:
                          type: string
        "500": *a2
        default:
          description: Default response
  /timesettlements:
    get:
      summary: Get time based settlements with all known peers and total amount sent
        or received
      security:
        - bearerAuth: []
      tags:
        - Settlements
      responses:
        "200":
          description: Time based settlements with all known peers and total amount sent
            or received
          content:
            application/json:
              schema: *a49
        "500": *a2
        default:
          description: Default response
  /topology:
    get:
      summary: Get topology of known network
      security:
        - bearerAuth: []
      tags:
        - Connectivity
      responses:
        "200":
          description: Swarm topology of the bee node
          content:
            application/json:
              schema:
                type: object
                properties:
                  baseAddr:
                    &a50
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  population:
                    type: integer
                  connected:
                    type: integer
                  timestamp:
                    type: string
                  nnLowWatermark:
                    type: integer
                  depth:
                    type: integer
                  reachability:
                    type: string
                    enum:
                      - Unknown
                      - Public
                      - Private
                  networkAvailability:
                    type: string
                    enum:
                      - Unknown
                      - Available
                      - Unavailable
                  bins:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        population:
                          type: integer
                        connected:
                          type: integer
                        disconnectedPeers:
                          type: array
                          items:
                            type: object
                            properties:
                              address: *a50
                              metrics:
                                &a51
                                type: object
                                properties:
                                  lastSeenTimestamp:
                                    type: integer
                                    nullable: false
                                  sessionConnectionRetry:
                                    type: integer
                                    nullable: false
                                  connectionTotalDuration:
                                    type: number
                                    nullable: false
                                  sessionConnectionDuration:
                                    type: number
                                    nullable: false
                                  sessionConnectionDirection:
                                    type: string
                                    nullable: false
                                  latencyEWMA:
                                    type: integer
                                    nullable: false
                                  reachability:
                                    type: string
                                  healthy:
                                    type: boolean
                        connectedPeers:
                          type: array
                          items:
                            type: object
                            properties:
                              address: *a50
                              metrics: *a51
  /welcome-message:
    get:
      summary: Get configured P2P welcome message
      security:
        - bearerAuth: []
      tags:
        - Connectivity
      responses:
        "200":
          description: Welcome message
          content:
            application/json:
              schema:
                &a52
                type: object
                properties:
                  welcomeMessage:
                    type: string
        "500": *a2
        default:
          description: Default response
    post:
      summary: Set P2P welcome message
      security:
        - bearerAuth: []
      tags:
        - Connectivity
      requestBody:
        content:
          application/json:
            schema: *a52
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: *a53
        "400": *a11
        "500": *a2
        default:
          description: Default response
  "/chequebook/cashout/{peer-id}":
    get:
      summary: Get last cashout action for the peer
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: peer-id
          schema: *a42
          required: true
          description: Swarm address of peer
      tags:
        - Chequebook
      responses:
        "200":
          description: Cashout status
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  lastCashedCheque:
                    type: object
                    nullable: true
                    properties:
                      beneficiary:
                        &a54
                        type: string
                        pattern: ^[A-Fa-f0-9]{40}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                      chequebook: *a54
                      payout:
                        &a55
                        description: Numeric string that represents integer which might exceed
                          `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                        type: string
                        example: "1000000000000000000"
                  transactionHash:
                    type: string
                    pattern: ^0x[A-Fa-f0-9]{64}$
                    example: "0x780cb6a37d1946978087896e1e489c37e30fe3e329510fff8d97360f73529f5a"
                  result:
                    type: object
                    properties:
                      recipient: *a54
                      lastPayout: *a55
                      bounced:
                        type: boolean
                  uncashedAmount: *a55
        "404": *a16
        "500": *a2
        default:
          description: Default response
    post:
      summary: Cashout the last cheque for the peer
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: peer-id
          schema: *a42
          required: true
          description: Swarm address of peer
        - &a60
          in: header
          name: gas-price
          schema:
            description: Gas price refers to the amount you’re willing to pay for every unit
              of gas.
            type: integer
            format: int64
          required: false
          description: Gas price for transaction
        - &a68
          in: header
          name: gas-limit
          schema:
            description: Gas limit refers to the maximum amount of gas you’re willing to
              spend on a particular transaction.
            type: integer
            format: int64
            minimum: 0
            maximum: 18446744073709552000
          required: false
          description: Gas limit for transaction
      tags:
        - Chequebook
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                &a61
                type: object
                properties:
                  transactionHash:
                    type: string
                    pattern: ^0x[A-Fa-f0-9]{64}$
                    example: "0x780cb6a37d1946978087896e1e489c37e30fe3e329510fff8d97360f73529f5a"
        "404": *a16
        "429":
          &a69
          description: Too many requests
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  reasons:
                    type: array
                    nullable: true
                    description: List of reasons for the error message.
                    items:
                      type: string
        "500": *a2
        default:
          description: Default response
  "/chequebook/cheque/{peer-id}":
    get:
      summary: Get last cheques for the peer
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: peer-id
          schema: *a42
          required: true
          description: Swarm address of peer
      tags:
        - Chequebook
      responses:
        "200":
          description: Last cheques
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  lastreceived:
                    &a57
                    type: object
                    nullable: true
                    properties:
                      beneficiary:
                        &a56
                        type: string
                        pattern: ^[A-Fa-f0-9]{40}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                      chequebook: *a56
                      payout:
                        description: Numeric string that represents integer which might exceed
                          `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                        type: string
                        example: "1000000000000000000"
                  lastsent: *a57
        "404": *a16
        "500": *a2
        default:
          description: Default response
  /chequebook/cheque:
    get:
      summary: Get last cheques for all peers
      security:
        - bearerAuth: []
      tags:
        - Chequebook
      responses:
        "200":
          description: Last cheques
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastcheques:
                    type: array
                    nullable: false
                    items:
                      type: object
                      properties:
                        peer:
                          type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                        lastreceived:
                          &a59
                          type: object
                          nullable: true
                          properties:
                            beneficiary:
                              &a58
                              type: string
                              pattern: ^[A-Fa-f0-9]{40}$
                              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                            chequebook: *a58
                            payout:
                              description: Numeric string that represents integer which might exceed
                                `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                              type: string
                              example: "1000000000000000000"
                        lastsent: *a59
        "404": *a16
        "500": *a2
        default:
          description: Default response
  /chequebook/deposit:
    post:
      summary: Deposit tokens from overlay address into chequebook
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: amount
          schema:
            type: integer
            format: int64
          required: true
          description: amount of tokens to deposit
        - *a60
      tags:
        - Chequebook
      responses:
        "201":
          description: Transaction hash of the deposit transaction
          content:
            application/json:
              schema: *a61
        "400": *a16
        "500": *a2
        default:
          description: Default response
  /chequebook/withdraw:
    post:
      summary: Withdraw tokens from the chequebook to the overlay address
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: amount
          schema:
            type: integer
            format: int64
          required: true
          description: amount of tokens to withdraw
        - *a60
      tags:
        - Chequebook
      responses:
        "201":
          description: Transaction hash of the withdraw transaction
          content:
            application/json:
              schema: *a61
        "400": *a16
        "500": *a2
        default:
          description: Default response
  /transactions:
    get:
      summary: Get list of pending transactions
      tags:
        - Transaction
      responses:
        "200":
          description: List of pending transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  pendingTransactions:
                    type: array
                    nullable: false
                    items:
                      type: object
                      properties:
                        transactionHash:
                          type: string
                          pattern: ^0x[A-Fa-f0-9]{64}$
                          example: "0x780cb6a37d1946978087896e1e489c37e30fe3e329510fff8d97360f73529f5a"
                        to:
                          type: string
                          pattern: ^[A-Fa-f0-9]{40}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                        nonce:
                          type: integer
                        gasPrice:
                          &a62
                          description: Numeric string that represents integer which might exceed
                            `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                          type: string
                          example: "1000000000000000000"
                        gasLimit:
                          type: integer
                        gasTipCap: *a62
                        gasTipBoost:
                          type: integer
                        gasFeeCap: *a62
                        data:
                          type: string
                        created:
                          type: string
                          format: date-time
                          example: 2020-06-11T11:26:42.6969797+02:00
                        description:
                          type: string
                        value: *a62
        "500": *a2
        default:
          description: Default response
  "/transactions/{txHash}":
    get:
      summary: Get information about a sent transaction
      parameters:
        - in: path
          name: txHash
          schema:
            &a64
            type: string
            pattern: ^0x[A-Fa-f0-9]{64}$
            example: "0x780cb6a37d1946978087896e1e489c37e30fe3e329510fff8d97360f73529f5a"
          required: true
          description: Hash of the transaction
      tags:
        - Transaction
      responses:
        "200":
          description: Get info about transaction
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionHash:
                    type: string
                    pattern: ^0x[A-Fa-f0-9]{64}$
                    example: "0x780cb6a37d1946978087896e1e489c37e30fe3e329510fff8d97360f73529f5a"
                  to:
                    type: string
                    pattern: ^[A-Fa-f0-9]{40}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                  nonce:
                    type: integer
                  gasPrice:
                    &a63
                    description: Numeric string that represents integer which might exceed
                      `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                    type: string
                    example: "1000000000000000000"
                  gasLimit:
                    type: integer
                  gasTipCap: *a63
                  gasTipBoost:
                    type: integer
                  gasFeeCap: *a63
                  data:
                    type: string
                  created:
                    type: string
                    format: date-time
                    example: 2020-06-11T11:26:42.6969797+02:00
                  description:
                    type: string
                  value: *a63
        "404": *a16
        "500": *a2
        default:
          description: Default response
    post:
      summary: Rebroadcast existing transaction
      parameters:
        - in: path
          name: txHash
          schema: *a64
          required: true
          description: Hash of the transaction
      tags:
        - Transaction
      responses:
        "200":
          description: Hash of the transaction
          content:
            application/json:
              schema: *a61
        "404": *a16
        "500": *a2
        default:
          description: Default response
    delete:
      summary: Cancel existing transaction
      parameters:
        - in: path
          name: txHash
          schema: *a64
          required: true
          description: Hash of the transaction
        - *a60
      tags:
        - Transaction
      responses:
        "200":
          description: Hash of the transaction
          content:
            application/json:
              schema: *a61
        "404": *a16
        "500": *a2
        default:
          description: Default response
  /stamps:
    get:
      summary: Get stamps for this node
      security:
        - bearerAuth: []
      tags:
        - Postage Stamps
      responses:
        "200":
          description: Returns an array of postage batches.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stamps:
                    type: array
                    nullable: false
                    items:
                      anyOf:
                        - type: object
                          properties:
                            batchID:
                              &a65
                              type: string
                              pattern: ^[A-Fa-f0-9]{64}$
                              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                            utilization:
                              type: integer
                            usable:
                              description: Indicate that the batch was discovered by the Bee node, but it
                                awaits enough on-chain confirmations before
                                declaring the batch as usable.
                              type: boolean
                            label:
                              type: string
                            depth:
                              type: integer
                            amount:
                              description: Numeric string that represents integer which might exceed
                                `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                              type: string
                              example: "1000000000000000000"
                            bucketDepth:
                              type: integer
                            blockNumber:
                              type: integer
                            immutableFlag:
                              type: boolean
                            exists:
                              type: boolean
                            batchTTL:
                              type: integer
                              format: int64
                        - type: object
                          properties:
                            batchID: *a65
                            exists:
                              type: boolean
                            batchTTL:
                              type: integer
                              format: int64
        "404": *a16
        default:
          description: Default response
  "/stamps/{batch_id}":
    parameters:
      - in: path
        name: batch_id
        schema:
          &a67
          type: string
          pattern: ^[A-Fa-f0-9]{64}$
          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
        required: true
        description: Swarm address of the stamp
    get:
      summary: Get an individual postage batch status
      security:
        - bearerAuth: []
      tags:
        - Postage Stamps
      responses:
        "200":
          description: Returns an individual postage batch state
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    properties:
                      batchID:
                        &a66
                        type: string
                        pattern: ^[A-Fa-f0-9]{64}$
                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                      utilization:
                        type: integer
                      usable:
                        description: Indicate that the batch was discovered by the Bee node, but it
                          awaits enough on-chain confirmations before declaring
                          the batch as usable.
                        type: boolean
                      label:
                        type: string
                      depth:
                        type: integer
                      amount:
                        description: Numeric string that represents integer which might exceed
                          `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                        type: string
                        example: "1000000000000000000"
                      bucketDepth:
                        type: integer
                      blockNumber:
                        type: integer
                      immutableFlag:
                        type: boolean
                      exists:
                        type: boolean
                      batchTTL:
                        type: integer
                        format: int64
                  - type: object
                    properties:
                      batchID: *a66
                      exists:
                        type: boolean
                      batchTTL:
                        type: integer
                        format: int64
        "400": *a11
        "404": *a16
        default:
          description: Default response
  "/stamps/{batch_id}/buckets":
    parameters:
      - in: path
        name: batch_id
        schema: *a67
        required: true
        description: Swarm address of the stamp
    get:
      summary: Get extended bucket data of a batch
      security:
        - bearerAuth: []
      tags:
        - Postage Stamps
      responses:
        "200":
          description: Returns extended bucket data of the provided batch ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  depth:
                    type: integer
                  bucketDepth:
                    type: integer
                  bucketUpperBound:
                    type: integer
                  buckets:
                    type: array
                    nullable: false
                    items:
                      type: object
                      properties:
                        bucketID:
                          type: integer
                        collisions:
                          type: integer
        "400": *a11
        "404": *a16
        default:
          description: Default response
  "/stamps/{amount}/{depth}":
    post:
      summary: Buy a new postage batch.
      security:
        - bearerAuth: []
      description: >
        Be aware, this endpoint creates an on-chain transactions and transfers
        BZZ from the node's Ethereum account and hence directly manipulates the
        wallet balance!
      tags:
        - Postage Stamps
      parameters:
        - in: path
          name: amount
          schema:
            &a76
            description: Numeric string that represents integer which might exceed
              `Number.MAX_SAFE_INTEGER` limit (2^53-1)
            type: string
            example: "1000000000000000000"
          required: true
          description: Amount of BZZ added that the postage batch will have.
        - in: path
          name: depth
          schema:
            type: integer
          required: true
          description: Batch depth which specifies how many chunks can be signed with the
            batch. It is a logarithm. Must be higher than default bucket depth
            (16)
        - in: query
          name: label
          schema:
            type: string
          required: false
          description: An optional label for this batch
        - in: header
          name: immutable
          schema:
            type: boolean
          required: false
        - *a60
        - *a68
      responses:
        "201":
          description: Returns the newly created postage batch ID
          content:
            application/json:
              schema:
                &a70
                type: object
                properties:
                  batchID:
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  txHash:
                    type: string
                    pattern: ^0x[A-Fa-f0-9]{64}$
                    example: "0x780cb6a37d1946978087896e1e489c37e30fe3e329510fff8d97360f73529f5a"
        "400": *a11
        "429": *a69
        "500": *a2
        default:
          description: Default response
  "/stamps/topup/{batch_id}/{amount}":
    patch:
      summary: Top up an existing postage batch.
      description: >
        Be aware, this endpoint creates on-chain transactions and transfers BZZ
        from the node's Ethereum account and hence directly manipulates the
        wallet balance!
      tags:
        - Postage Stamps
      parameters:
        - in: path
          name: batch_id
          schema: *a67
          required: true
          description: Batch ID to top up
        - in: path
          name: amount
          schema:
            type: integer
            format: int64
          required: true
          description: Amount of BZZ per chunk to top up to an existing postage batch.
        - *a60
        - *a68
      responses:
        "202":
          description: Returns the postage batch ID that was topped up
          content:
            application/json:
              schema: *a70
        "400": *a11
        "402": *a18
        "429": *a69
        "500": *a2
        default:
          description: Default response
  "/stamps/dilute/{batch_id}/{depth}":
    patch:
      summary: Dilute an existing postage batch.
      description: >
        Be aware, this endpoint creates on-chain transactions and transfers BZZ
        from the node's Ethereum account and hence directly manipulates the
        wallet balance!
      tags:
        - Postage Stamps
      parameters:
        - in: path
          name: batch_id
          schema: *a67
          required: true
          description: Batch ID to dilute
        - in: path
          name: depth
          schema:
            type: integer
          required: true
          description: New batch depth. Must be higher than the previous depth.
        - *a60
        - *a68
      responses:
        "202":
          description: Returns the postage batch ID that was diluted.
          content:
            application/json:
              schema: *a70
        "400": *a11
        "429": *a69
        "500": *a2
        default:
          description: Default response
  /batches:
    get:
      summary: Get all globally available batches that were purchased by all nodes.
      security:
        - bearerAuth: []
      tags:
        - Postage Stamps
      responses:
        "200":
          description: Returns an array of all available and currently valid postage
            batches.
          content:
            application/json:
              schema:
                type: object
                properties:
                  batches:
                    type: array
                    nullable: false
                    items:
                      type: object
                      properties:
                        batchID:
                          type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                        value:
                          description: Numeric string that represents integer which might exceed
                            `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                          type: string
                          example: "1000000000000000000"
                        start:
                          type: integer
                        depth:
                          type: integer
                        bucketDepth:
                          type: integer
                        immutableFlag:
                          type: boolean
                        batchTTL:
                          type: integer
                          format: int64
                        owner:
                          type: string
                          pattern: ^[A-Fa-f0-9]{40}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                        storageRadius:
                          type: integer
        default:
          description: Default response
  "/rchash/{depth}/{anchor1}/{anchor2}":
    get:
      summary: Get reserve commitment hash with sample proofs
      tags:
        - RChash
      parameters:
        - in: path
          name: depth
          schema:
            type: integer
            minimum: 0
            default: 0
          required: true
          description: The storage depth.
        - in: path
          name: anchor1
          schema: *a33
          required: true
          description: The first anchor.
        - in: path
          name: anchor2
          schema: *a33
          required: true
          description: The second anchor.
      responses:
        "200":
          description: Reserve sample response
          content:
            application/json:
              schema:
                type: object
                properties:
                  durationSeconds:
                    description: Go time.Duration format in seconds
                    type: number
                    example: 30.5
                  hash:
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  proofs:
                    type: object
                    properties:
                      proof1:
                        &a71
                        type: object
                        properties:
                          chunkSpan:
                            minimum: 0
                            type: integer
                          postageProof:
                            type: object
                            properties:
                              index:
                                type: string
                              postageId:
                                type: string
                              signature:
                                type: string
                              timeStamp:
                                type: string
                          proofSegments:
                            items:
                              type: string
                            nullable: true
                            type: array
                          proofSegments2:
                            items:
                              type: string
                            nullable: true
                            type: array
                          proofSegments3:
                            items:
                              type: string
                            nullable: true
                            type: array
                          proveSegment:
                            type: string
                          proveSegment2:
                            type: string
                          socProof:
                            items:
                              type: object
                              properties:
                                chunkAddr:
                                  type: string
                                identifier:
                                  type: string
                                signature:
                                  type: string
                                signer:
                                  type: string
                            nullable: true
                            type: array
                      proof2: *a71
                      proofLast: *a71
        "500": *a2
        default:
          description: Default response
  /accounting:
    get:
      summary: Get all accounting associated values with all known peers
      tags:
        - Balance
      responses:
        "200":
          description: Own accounting associated values with all known peers
          content:
            application/json:
              schema:
                type: object
                properties:
                  peerData:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        balance:
                          &a72
                          description: Numeric string that represents integer which might exceed
                            `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                          type: string
                          example: "1000000000000000000"
                        thresholdReceived: *a72
                        thresholdGiven: *a72
                        surplusBalance: *a72
                        reservedBalance: *a72
                        shadowReservedBalance: *a72
                        ghostBalance: *a72
        "500": *a2
        default:
          description: Default response
  /redistributionstate:
    get:
      summary: Get current status of node in redistribution game
      tags:
        - RedistributionState
      responses:
        "200":
          description: Redistribution status info
          content:
            application/json:
              schema:
                type: object
                properties:
                  minimumGasFunds:
                    &a73
                    description: Numeric string that represents integer which might exceed
                      `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                    type: string
                    example: "1000000000000000000"
                  hasSufficientFunds:
                    type: boolean
                  isFrozen:
                    type: boolean
                  isFullySynced:
                    type: boolean
                  isHealthy:
                    type: boolean
                  phase:
                    type: string
                  round:
                    type: integer
                  lastWonRound:
                    type: integer
                  lastPlayedRound:
                    type: integer
                  lastFrozenRound:
                    type: integer
                  lastSelectedRound:
                    type: integer
                  lastSampleDurationSeconds:
                    type: number
                  block:
                    type: integer
                  reward: *a73
                  fees: *a73
        "400": *a11
        "500": *a2
        default:
          description: Default response
  /wallet:
    get:
      summary: Get wallet balance for BZZ and xDai
      tags:
        - Wallet
      responses:
        "200":
          description: Wallet balance info
          content:
            application/json:
              schema:
                type: object
                properties:
                  bzzBalance:
                    &a74
                    description: Numeric string that represents integer which might exceed
                      `Number.MAX_SAFE_INTEGER` limit (2^53-1)
                    type: string
                    example: "1000000000000000000"
                  nativeTokenBalance: *a74
                  chainID:
                    type: integer
                  chequebookContractAddress:
                    &a75
                    type: string
                    pattern: ^[A-Fa-f0-9]{40}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906
                  walletAddress: *a75
        "500": *a2
        default:
          description: Default response
  "/wallet/withdraw/{coin}":
    post:
      summary: Allows withdrawals of BZZ or xDAI to provided (whitelisted) address
      tags:
        - Wallet
      parameters:
        - in: query
          name: amount
          required: true
          schema: *a76
        - in: query
          name: address
          required: true
          schema: *a35
        - in: path
          name: coin
          required: true
          schema: *a42
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionHash:
                    type: string
                    pattern: ^0x[A-Fa-f0-9]{64}$
                    example: "0x780cb6a37d1946978087896e1e489c37e30fe3e329510fff8d97360f73529f5a"
          description: OK
        "400": *a11
        "500": *a2
        default:
          description: Default response
  /stake/withdrawable:
    get:
      summary: Get the withdrawable staked amount.
      description: This endpoint fetches any amount that is possible to withdraw as surplus.
      tags:
        - Staking
      responses:
        "200":
          type: object
          properties:
            withdrawableAmount:
              description: Numeric string that represents integer which might exceed
                `Number.MAX_SAFE_INTEGER` limit (2^53-1)
              type: string
              example: "1000000000000000000"
        "500": *a2
        default:
          description: Default response
    delete:
      summary: Withdraw the extra withdrawable staked amount.
      description: This endpoint withdraws any amount that is possible to withdraw as
        surplus.
      tags:
        - Staking
      parameters:
        - *a60
        - *a68
      responses:
        "200":
          &a77
          type: object
          properties:
            txHash:
              type: string
              pattern: ^0x[A-Fa-f0-9]{64}$
              example: "0x780cb6a37d1946978087896e1e489c37e30fe3e329510fff8d97360f73529f5a"
        "400": *a11
        "500": *a2
        default:
          description: Default response
  "/stake/{amount}":
    post:
      summary: Deposit some amount for staking.
      description: Be aware, this endpoint creates an on-chain transactions and
        transfers BZZ from the node's Ethereum account and hence directly
        manipulates the wallet balance.
      tags:
        - Staking
      parameters:
        - in: path
          name: amount
          schema:
            type: string
          required: true
          description: Amount of BZZ added that will be deposited for staking.
        - *a60
        - *a68
      responses:
        "200": *a77
        "400": *a11
        "500": *a2
        default:
          description: Default response
  /stake:
    get:
      summary: Get the staked amount.
      description: This endpoint fetches the total staked amount from the blockchain.
      tags:
        - Staking
      responses:
        "200":
          type: object
          properties:
            stakedAmount:
              description: Numeric string that represents integer which might exceed
                `Number.MAX_SAFE_INTEGER` limit (2^53-1)
              type: string
              example: "1000000000000000000"
        "500": *a2
        default:
          description: Default response
    delete:
      summary: Withdraws all past staked amount back to the wallet.
      description: Be aware, this endpoint can only be called when the contract is
        paused and is in the process of being migrated to a new contract.
      tags:
        - Staking
      parameters:
        - *a60
        - *a68
      responses:
        "200": *a77
        "400": *a11
        "500": *a2
        default:
          description: Default response
  /loggers:
    get:
      summary: Get all available loggers.
      tags:
        - Logging
      responses:
        "200":
          description: Returns an array of all available loggers, also represented in
            short form in a tree.
          content:
            application/json:
              schema:
                &a78
                type: object
                properties:
                  tree:
                    type: object
                    additionalProperties:
                      type: object
                      nullable: true
                      properties:
                        +:
                          type: array
                          items:
                            type: string
                          description: The combination of the logger verbosity and its subsystem separated
                            by |.
                          example: warning|one/name[0][]>>824634860360
                  loggers:
                    type: array
                    items:
                      type: object
                      properties:
                        logger:
                          type: string
                        verbosity:
                          type: string
                        subsystem:
                          type: string
                        id:
                          type: string
        "400": *a11
        default:
          description: Default response
  "/loggers/{exp}":
    get:
      summary: Get all available loggers that match the specified expression.
      parameters:
        - in: path
          name: exp
          schema:
            &a79
            type: string
            description: Base 64 encoded regular expression or subsystem string.
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            example: b25lL25hbWU=
          required: true
          description: Regular expression or a subsystem that matches the logger(s).
      tags:
        - Logging
      responses:
        "200":
          description: Returns an array of all available loggers that matches given
            expression, also represented in short form in a tree.
          content:
            application/json:
              schema: *a78
        "400": *a11
        default:
          description: Default response
    put:
      summary: Set logger(s) verbosity level.
      parameters:
        - in: path
          name: exp
          schema: *a79
          required: true
          description: Regular expression or a subsystem that matches the logger(s).
      tags:
        - Logging
      responses:
        "200":
          description: The verbosity was changed successfully.
        "400": *a11
        default:
          description: Default response
  /status:
    get:
      summary: Get the current status snapshot of this node.
      tags:
        - Node Status
      responses:
        "200":
          description: Returns the current node status snapshot.
          content:
            application/json:
              schema:
                type: object
                properties:
                  overlay:
                    type: string
                    pattern: ^[A-Fa-f0-9]{64}$
                    example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                  proximity:
                    type: integer
                  beeMode:
                    type: string
                    enum:
                      - light
                      - full
                      - dev
                      - ultra-light
                      - unknown
                  reserveSize:
                    type: integer
                  reserveSizeWithinRadius:
                    type: integer
                  pullsyncRate:
                    type: number
                  storageRadius:
                    type: integer
                  connectedPeers:
                    type: integer
                  neighborhoodSize:
                    type: integer
                  requestFailed:
                    nullable: true
                    type: boolean
                  batchCommitment:
                    type: integer
                  isReachable:
                    type: boolean
                  lastSyncedBlock:
                    type: integer
                    format: int64
                  committedDepth:
                    type: integer
        "400": *a11
        default:
          description: Default response.
  /status/peers:
    get:
      summary: Get the current status snapshot of this node connected peers.
      tags:
        - Node Status
      responses:
        "200":
          description: Returns the status snapshot of this node connected peers
          content:
            application/json:
              schema:
                type: object
                properties:
                  snapshots:
                    type: array
                    nullable: false
                    items:
                      type: object
                      properties:
                        overlay:
                          type: string
                          pattern: ^[A-Fa-f0-9]{64}$
                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f
                        proximity:
                          type: integer
                        beeMode:
                          type: string
                          enum:
                            - light
                            - full
                            - dev
                            - ultra-light
                            - unknown
                        reserveSize:
                          type: integer
                        reserveSizeWithinRadius:
                          type: integer
                        pullsyncRate:
                          type: number
                        storageRadius:
                          type: integer
                        connectedPeers:
                          type: integer
                        neighborhoodSize:
                          type: integer
                        requestFailed:
                          nullable: true
                          type: boolean
                        batchCommitment:
                          type: integer
                        isReachable:
                          type: boolean
                        lastSyncedBlock:
                          type: integer
                          format: int64
                        committedDepth:
                          type: integer
        "400": *a11
        default:
          description: Default response.
  /status/neighborhoods:
    get:
      summary: Get the current neighborhoods status of this node.
      tags:
        - Node Status
      responses:
        "200":
          description: Returns the neighborhoods status of this node
          content:
            application/json:
              schema:
                type: object
                properties:
                  neighborhoods:
                    type: array
                    nullable: false
                    items:
                      type: object
                      properties:
                        neighborhood:
                          type: string
                          description: Swarm address of a neighborhood in string binary format, usually
                            limited to as many bits as the current storage
                            radius.
                          example: "011010111"
                        reserveSizeWithinRadius:
                          type: integer
                        proximity:
                          type: integer
        "400": *a11
        default:
          description: Default response.
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: SecurityToken
