{
  "runtime": "Net50",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "openapi: 3.0.3\ninfo:\n  version: 3.0.1\n  title: Bee API\n  description: A list of the currently provided Interfaces to interact with the\n    swarm, implementing file operations and sending messages\nsecurity:\n  - {}\nexternalDocs:\n  description: Browse the documentation @ the Swarm Docs\n  url: https://docs.ethswarm.org\nservers:\n  - url: http://{apiRoot}:{port}/v1\n    variables:\n      apiRoot:\n        default: localhost\n        description: Base address of the local bee node main API\n      port:\n        default: \"1633\"\n        description: Service port provided in bee node config\n  - url: http://{apiRoot}:{port}\n    variables:\n      apiRoot:\n        default: localhost\n        description: Base address of the local bee node main API\n      port:\n        default: \"1633\"\n        description: Service port provided in bee node config\npaths:\n  /auth:\n    post:\n      summary: Authenticate - This endpoint is experimental\n      tags:\n        - Auth\n      security:\n        - basicAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              &a1\n              type: object\n              properties:\n                role:\n                  type: string\n                  nullable: false\n                expiry:\n                  type: integer\n                  nullable: false\n                  description: Expiration time in seconds\n      responses:\n        \"201\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                &a2\n                type: object\n                properties:\n                  key:\n                    type: string\n                    nullable: false\n        \"400\":\n          &a3\n          description: Bad request\n          content:\n            application/problem+json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  code:\n                    type: integer\n        \"401\":\n          &a4\n          description: Unauthorized\n          content:\n            application/problem+json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  code:\n                    type: integer\n        \"500\":\n          &a5\n          description: Internal Server Error\n          content:\n            application/problem+json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  code:\n                    type: integer\n        default:\n          description: Default response\n  /refresh:\n    post:\n      summary: Refresh the auth token - This endpoint is experimental\n      tags:\n        - Auth\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: *a1\n      responses:\n        \"201\":\n          description: Ok\n          content:\n            application/json:\n              schema: *a2\n        \"400\": *a3\n        \"401\": *a4\n        \"500\": *a5\n        default:\n          description: Default response\n  /bytes:\n    post:\n      summary: Upload data\n      tags:\n        - Bytes\n      parameters:\n        - &a9\n          in: header\n          name: swarm-tag\n          schema:\n            &a6\n            type: integer\n          required: false\n          description: Associate upload with an existing Tag UID\n        - &a10\n          in: header\n          name: swarm-pin\n          schema:\n            type: boolean\n          required: false\n          description: >\n            Represents if the uploaded data should be also locally pinned on the\n            node.\n\n            Warning! Not available for nodes that run in Gateway mode!\n        - &a15\n          in: header\n          name: swarm-encrypt\n          schema:\n            type: boolean\n          required: false\n          description: |\n            Represents the encrypting state of the file\n            Warning! Not available for nodes that run in Gateway mode!\n        - &a11\n          in: header\n          name: swarm-postage-batch-id\n          description: ID of Postage Batch that is used to upload data with\n          required: true\n          schema:\n            type: string\n            pattern: ^[A-Fa-f0-9]{64}$\n            example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f\n        - &a12\n          in: header\n          name: swarm-deferred-upload\n          schema:\n            type: boolean\n            default: \"true\"\n          required: false\n          description: >\n            Determines if the uploaded data should be sent to the network\n            immediately or in a deferred fashion. By default the upload will be\n            deferred.\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        \"201\":\n          description: Ok\n          headers:\n            swarm-tag:\n              &a16\n              description: Tag UID\n              schema: *a6\n          content:\n            application/json:\n              schema:\n                &a17\n                type: object\n                properties:\n                  reference:\n                    oneOf:\n                      - type: string\n                        pattern: ^[A-Fa-f0-9]{64}$\n                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f\n                      - type: string\n                        pattern: ^[A-Fa-f0-9]{128}$\n                        example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2\n                      - type: string\n                        pattern: ^[A-Za-z0-9]+\\.[A-Za-z0-9]+$\n                        example: swarm.eth\n        \"400\": *a3\n        \"402\":\n          &a13\n          description: Payment Required\n          content:\n            application/problem+json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  code:\n                    type: integer\n        \"403\":\n          &a14\n          description: Endpoint or header (pinning or encryption headers) forbidden in\n            Gateway mode\n          content:\n            application/problem+json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  code:\n                    type: integer\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/bytes/{reference}\":\n    get:\n      summary: Get referenced data\n      tags:\n        - Bytes\n      parameters:\n        - in: path\n          name: reference\n          schema:\n            &a7\n            oneOf:\n              - type: string\n                pattern: ^[A-Fa-f0-9]{64}$\n                example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f\n              - type: string\n                pattern: ^[A-Fa-f0-9]{128}$\n                example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2\n              - type: string\n                pattern: ^[A-Za-z0-9]+\\.[A-Za-z0-9]+$\n                example: swarm.eth\n          required: true\n          description: Swarm address reference to content\n      responses:\n        \"200\":\n          description: Retrieved content specified by reference\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        \"404\":\n          &a8\n          description: Not Found\n          content:\n            application/problem+json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  code:\n                    type: integer\n        default:\n          description: Default response\n  \"/chunks/{reference}\":\n    get:\n      summary: Get Chunk\n      tags:\n        - Chunk\n      parameters:\n        - in: path\n          name: reference\n          schema: *a7\n          required: true\n          description: Swarm address of chunk\n      responses:\n        \"200\":\n          description: Retrieved chunk content\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        \"400\": *a3\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n  /chunks:\n    post:\n      summary: Upload Chunk\n      tags:\n        - Chunk\n      parameters:\n        - *a9\n        - *a10\n        - *a11\n        - *a12\n      requestBody:\n        description: Chunk binary data that has to have at least 8 bytes.\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        \"201\":\n          description: Ok\n          headers:\n            swarm-tag:\n              description: Tag UID if it was passed to the request `swarm-tag` header.\n              schema: *a6\n          content:\n            application/json:\n              schema:\n                &a19\n                type: object\n                properties:\n                  status:\n                    type: string\n                  version:\n                    type: string\n                  apiVersion:\n                    type: string\n                    default: 0.0.0\n                    description: The default value is set in case the bee binary was not build\n                      correctly.\n                  debugApiVersion:\n                    type: string\n                    default: 0.0.0\n                    description: The default value is set in case the bee binary was not build\n                      correctly.\n        \"400\": *a3\n        \"402\": *a13\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n  /chunks/stream:\n    get:\n      summary: Upload stream of chunks\n      tags:\n        - Chunk\n      parameters:\n        - *a9\n        - *a10\n        - *a11\n      responses:\n        \"200\":\n          description: Returns a Websocket connection on which stream of chunks can be\n            uploaded. Each chunk sent is acknowledged using a binary response\n            `0` which serves as confirmation of upload of single chunk. Chunks\n            should be packaged as binary messages for uploading.\n        \"400\": *a3\n        default:\n          description: Default response\n  /bzz:\n    post:\n      summary: Upload file or a collection of files\n      description: >-\n        In order to upload a collection, user can send a multipart request with\n        all the files populated in the form data with appropriate headers.\n\n         User can also upload a tar file along with the swarm-collection header. This will upload the tar file after extracting the entire directory structure.\n\n         If the swarm-collection header is absent, all requests (including tar files) are considered as single file uploads.\n\n         A multipart request is treated as a collection regardless of whether the swarm-collection header is present. This means in order to serve single files uploaded as a multipart request, the swarm-index-document header should be used with the name of the file.\n      tags:\n        - BZZ\n      parameters:\n        - in: query\n          name: name\n          schema:\n            type: string\n          required: false\n          description: Filename when uploading single file\n        - *a9\n        - *a10\n        - *a15\n        - in: header\n          name: Content-Type\n          schema:\n            type: string\n          description: The specified content-type is preserved for download of the asset\n        - in: header\n          name: swarm-collection\n          schema:\n            type: boolean\n          required: false\n          description: Upload file/files as a collection\n        - in: header\n          name: swarm-index-document\n          schema:\n            type: string\n            example: index.html\n          required: false\n          description: Default file to be referenced on path, if exists under that path\n        - in: header\n          name: swarm-error-document\n          schema:\n            type: string\n            example: error.html\n          required: false\n          description: Configure custom error document to be returned when a specified\n            path can not be found in collection\n        - *a11\n        - *a12\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n          application/x-tar:\n            schema:\n              type: string\n              format: binary\n      responses:\n        \"201\":\n          description: Ok\n          headers:\n            swarm-tag: *a16\n            etag:\n              description: >\n                The RFC7232 ETag header field in a response provides the current\n                entity-\n\n                tag for the selected resource. An entity-tag is an opaque identifier for\n\n                different versions of a resource over time, regardless whether multiple\n\n                versions are valid at the same time. An entity-tag consists of an opaque\n\n                quoted string, possibly prefixed by a weakness indicator.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema: *a17\n        \"400\": *a3\n        \"402\": *a13\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/bzz/{reference}\":\n    patch:\n      summary: \"Reupload a root hash to the network; deprecated: use\n        /stewardship/{reference} instead\"\n      deprecated: true\n      tags:\n        - BZZ\n      parameters:\n        - in: path\n          name: reference\n          schema: *a7\n          required: true\n          description: \"Root hash of content (can be of any type: collection, file, chunk)\"\n      responses:\n        \"200\":\n          description: Ok\n        \"500\": *a5\n        default:\n          description: Default response\n    get:\n      summary: Get file or index document from a collection of files\n      tags:\n        - BZZ\n      parameters:\n        - in: path\n          name: reference\n          schema: *a7\n          required: true\n          description: Swarm address of content\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        \"400\": *a3\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/bzz/{reference}/{path}\":\n    get:\n      summary: Get referenced file from a collection of files\n      tags:\n        - BZZ\n      parameters:\n        - in: path\n          name: reference\n          schema: *a7\n          required: true\n          description: Swarm address of content\n        - in: path\n          name: path\n          schema:\n            type: string\n          required: true\n          description: Path to the file in the collection.\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        \"400\": *a3\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n  /tags:\n    get:\n      summary: Get list of tags\n      tags:\n        - Tag\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n          description: The number of items to skip before starting to collect the result\n            set.\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 1000\n            default: 100\n          required: false\n          description: The numbers of items to return.\n      responses:\n        \"200\":\n          description: List of tags\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tags:\n                    type: array\n                    nullable: true\n                    items:\n                      type: object\n                      properties:\n                        uid:\n                          type: integer\n                        startedAt:\n                          type: string\n                          format: date-time\n                          example: 2020-06-11T11:26:42.6969797+02:00\n                        total:\n                          type: integer\n                        processed:\n                          type: integer\n                        synced:\n                          type: integer\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n    post:\n      summary: Create Tag\n      tags:\n        - Tag\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                address:\n                  type: string\n                  pattern: ^[A-Fa-f0-9]{64}$\n                  example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f\n      responses:\n        \"201\":\n          description: New Tag Info\n          content:\n            application/json:\n              schema:\n                &a18\n                type: object\n                properties:\n                  uid:\n                    type: integer\n                  startedAt:\n                    type: string\n                    format: date-time\n                    example: 2020-06-11T11:26:42.6969797+02:00\n                  total:\n                    type: integer\n                  processed:\n                    type: integer\n                  synced:\n                    type: integer\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/tags/{uid}\":\n    get:\n      summary: Get Tag information using Uid\n      tags:\n        - Tag\n      parameters:\n        - in: path\n          name: uid\n          schema: *a6\n          required: true\n          description: Uid\n      responses:\n        \"200\":\n          description: Tag info\n          content:\n            application/json:\n              schema: *a18\n        \"400\": *a3\n        \"403\": *a14\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n    delete:\n      summary: Delete Tag information using Uid\n      tags:\n        - Tag\n      parameters:\n        - in: path\n          name: uid\n          schema: *a6\n          required: true\n          description: Uid\n      responses:\n        \"204\":\n          description: The resource was deleted successfully.\n        \"400\": *a3\n        \"403\": *a14\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n    patch:\n      summary: Update Total Count and swarm hash for a tag of an input stream of\n        unknown size using Uid\n      tags:\n        - Tag\n      parameters:\n        - in: path\n          name: uid\n          schema: *a6\n          required: true\n          description: Uid\n      requestBody:\n        description: Can contain swarm hash to use for the tag\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                address:\n                  type: string\n                  pattern: ^[A-Fa-f0-9]{64}$\n                  example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema: *a19\n        \"403\": *a14\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/pins/{reference}\":\n    parameters:\n      - in: path\n        name: reference\n        schema:\n          &a21\n          oneOf:\n            - type: string\n              pattern: ^[A-Fa-f0-9]{64}$\n              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f\n            - type: string\n              pattern: ^[A-Fa-f0-9]{128}$\n              example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2\n        required: true\n        description: Swarm reference of the root hash\n    post:\n      summary: Pin the root hash with the given reference\n      tags:\n        - Pinning\n      responses:\n        \"200\":\n          description: Pin already exists, so no operation\n          content:\n            application/json:\n              schema:\n                &a20\n                type: object\n                properties:\n                  message:\n                    type: string\n                  code:\n                    type: integer\n        \"201\":\n          description: New pin with root reference was created\n          content:\n            application/json:\n              schema: *a20\n        \"400\": *a3\n        \"403\": *a14\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n    delete:\n      summary: Unpin the root hash with the given reference\n      tags:\n        - Pinning\n      responses:\n        \"200\":\n          description: Unpinning root hash with reference\n          content:\n            application/json:\n              schema: *a20\n        \"400\": *a3\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n    get:\n      summary: Get pinning status of the root hash with the given reference\n      tags:\n        - Pinning\n      responses:\n        \"200\":\n          description: Reference of the pinned root hash\n          content:\n            application/json:\n              schema: *a21\n        \"400\": *a3\n        \"403\": *a14\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n  /pins:\n    get:\n      summary: Get the list of pinned root hash references\n      tags:\n        - Pinning\n      responses:\n        \"200\":\n          description: List of pinned root hash references\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  references:\n                    type: array\n                    nullable: false\n                    items:\n                      oneOf:\n                        - type: string\n                          pattern: ^[A-Fa-f0-9]{64}$\n                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f\n                        - type: string\n                          pattern: ^[A-Fa-f0-9]{128}$\n                          example: 36b7efd913ca4cf880b8eeac5093fa27b0825906c600685b6abdd6566e6cfe8f2d2810619d29b5dbefd5d74abce25d58b81b251baddb9c3871cf0d6967deaae2\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/pss/send/{topic}/{targets}\":\n    post:\n      summary: Send to recipient or target with Postal Service for Swarm\n      tags:\n        - Postal Service for Swarm\n      parameters:\n        - in: path\n          name: topic\n          schema:\n            &a22\n            type: string\n          required: true\n          description: Topic name\n        - in: path\n          name: targets\n          schema:\n            pattern: ^[0-9a-fA-F]{1,6}(,[0-9a-fA-F]{1,6})*$\n            description: List of hex string targets that are comma seprated and can have\n              maximum length of 6\n            type: string\n          required: true\n          description: Target message address prefix. If multiple targets are specified,\n            only one would be matched.\n        - in: query\n          name: recipient\n          schema:\n            type: string\n          required: false\n          description: Recipient publickey\n        - *a11\n      responses:\n        \"201\":\n          description: Subscribed to topic\n        \"400\": *a3\n        \"402\": *a13\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/pss/subscribe/{topic}\":\n    get:\n      summary: Subscribe for messages on the given topic.\n      tags:\n        - Postal Service for Swarm\n      parameters:\n        - in: path\n          name: topic\n          schema: *a22\n          required: true\n          description: Topic name\n      responses:\n        \"200\":\n          description: Returns a WebSocket with a subscription for incoming message data\n            on the requested topic.\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/soc/{owner}/{id}\":\n    post:\n      summary: Upload single owner chunk\n      tags:\n        - Single owner chunk\n      parameters:\n        - in: path\n          name: owner\n          schema:\n            &a24\n            type: string\n            pattern: ^[A-Fa-f0-9]{40}$\n            example: 36b7efd913ca4cf880b8eeac5093fa27b0825906\n          required: true\n          description: Owner\n        - in: path\n          name: id\n          schema:\n            &a23\n            type: string\n            pattern: ^([A-Fa-f0-9]+)$\n            example: cf880b8eeac5093fa27b0825906c600685\n          required: true\n          description: Id\n        - in: query\n          name: sig\n          schema: *a23\n          required: true\n          description: Signature\n        - *a10\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema: *a17\n        \"400\": *a3\n        \"401\": *a4\n        \"402\": *a13\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/feeds/{owner}/{topic}\":\n    post:\n      summary: Create an initial feed root manifest\n      tags:\n        - Feed\n      parameters:\n        - in: path\n          name: owner\n          schema: *a24\n          required: true\n          description: Owner\n        - in: path\n          name: topic\n          schema: *a23\n          required: true\n          description: Topic\n        - in: query\n          name: type\n          schema:\n            &a25\n            type: string\n            pattern: ^(sequence|epoch)$\n          required: false\n          description: \"Feed indexing scheme (default: sequence)\"\n        - *a10\n        - *a11\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema: *a17\n        \"400\": *a3\n        \"401\": *a4\n        \"402\": *a13\n        \"403\": *a14\n        \"500\": *a5\n        default:\n          description: Default response\n    get:\n      summary: Find feed update\n      tags:\n        - Feed\n      parameters:\n        - in: path\n          name: owner\n          schema: *a24\n          required: true\n          description: Owner\n        - in: path\n          name: topic\n          schema: *a23\n          required: true\n          description: Topic\n        - in: query\n          name: at\n          schema:\n            type: integer\n          required: false\n          description: \"Timestamp of the update (default: now)\"\n        - in: query\n          name: type\n          schema: *a25\n          required: false\n          description: \"Feed indexing scheme (default: sequence)\"\n      responses:\n        \"200\":\n          description: Latest feed update\n          headers:\n            swarm-feed-index:\n              description: The index of the found update\n              schema:\n                type: string\n                pattern: ^([A-Fa-f0-9]+)$\n                example: cf880b8eeac5093fa27b0825906c600685\n            swarm-feed-index-next:\n              description: The index of the next possible update\n              schema:\n                type: string\n                pattern: ^([A-Fa-f0-9]+)$\n                example: cf880b8eeac5093fa27b0825906c600685\n          content:\n            application/json:\n              schema: *a17\n        \"400\": *a3\n        \"401\": *a4\n        \"500\": *a5\n        default:\n          description: Default response\n  \"/stewardship/{reference}\":\n    get:\n      summary: Check if content is available\n      tags:\n        - Stewardship\n      parameters:\n        - in: path\n          name: reference\n          schema: *a7\n          required: true\n          description: \"Root hash of content (can be of any type: collection, file, chunk)\"\n      responses:\n        \"200\":\n          description: Returns if the content is retrievable\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  isRetrievable:\n                    type: boolean\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\n    put:\n      summary: Reupload a root hash to the network\n      tags:\n        - Stewardship\n      parameters:\n        - in: path\n          name: reference\n          schema: *a7\n          required: true\n          description: \"Root hash of content (can be of any type: collection, file, chunk)\"\n      responses:\n        \"200\":\n          description: Ok\n        \"404\": *a8\n        \"500\": *a5\n        default:\n          description: Default response\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: SecurityToken\n",
      "url": "",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToCSharpClient": {
      "clientBaseClass": null,
      "configurationClass": null,
      "generateClientClasses": true,
      "generateClientInterfaces": true,
      "clientBaseInterface": null,
      "injectHttpClient": true,
      "disposeHttpClient": true,
      "protectedMethods": [],
      "generateExceptionClasses": false,
      "exceptionClass": "BeeNetGatewayApiException",
      "wrapDtoExceptions": true,
      "useHttpClientCreationMethod": false,
      "httpClientType": "System.Net.Http.HttpClient",
      "useHttpRequestMessageCreationMethod": false,
      "useBaseUrl": true,
      "generateBaseUrlProperty": true,
      "generateSyncMethods": false,
      "generatePrepareRequestAndProcessResponseAsAsyncMethods": false,
      "exposeJsonSerializerSettings": false,
      "clientClassAccessModifier": "public",
      "typeAccessModifier": "public",
      "generateContractsOutput": false,
      "contractsNamespace": null,
      "contractsOutputFilePath": null,
      "parameterDateTimeFormat": "s",
      "parameterDateFormat": "yyyy-MM-dd",
      "generateUpdateJsonSerializerSettingsMethod": true,
      "useRequestAndResponseSerializationSettings": false,
      "serializeTypeInformation": false,
      "queryNullValue": "",
      "className": "BeeGatewayClient_3_0_1",
      "operationGenerationMode": "SingleClientFromPathSegments",
      "additionalNamespaceUsages": [
        "Etherna.BeeNet.Exceptions"
      ],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": true,
      "generateJsonMethods": false,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "Etherna.BeeNet.Clients.GatewayApi.V3_0_1",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.ICollection",
      "arrayInstanceType": "System.Collections.ObjectModel.Collection",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "jsonLibrary": "SystemTextJson",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": false,
      "generateNullableReferenceTypes": true,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "../src/BeeNet/Clients/GatewayApi/v3_0_1/BeeGatewayClient_3_0_1.cs",
      "newLineBehavior": "Auto"
    }
  }
}