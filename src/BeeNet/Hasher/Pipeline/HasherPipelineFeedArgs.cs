// Copyright 2021-present Etherna SA
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Etherna.BeeNet.Models;
using System;
using System.Diagnostics.CodeAnalysis;

namespace Etherna.BeeNet.Hasher.Pipeline
{
    [SuppressMessage("Performance", "CA1819:Properties should not return arrays")]
    internal class HasherPipelineFeedArgs
    {
        // Fields.
        private readonly byte[] _data;
        private readonly byte[]? _span;
        
        // Constructor.
        public HasherPipelineFeedArgs(
            byte[] data,
            byte[]? span = null,
            long numberId = 0)
        {
            if (span is not null)
            {
                if (data.Length < SwarmChunk.SpanSize)
                    throw new InvalidOperationException("Data must contain also span, if present");
                if (span.Length != SwarmChunk.SpanSize)
                    throw new ArgumentOutOfRangeException(nameof(span), $"Span must have length of {SwarmChunk.SpanSize}");
            }
            
            _data = data;
            _span = span;
            NumberId = numberId;
        }
        
        // Properties.
        /// <summary>
        /// Address, generated by BMT
        /// </summary>
        public SwarmAddress? Address { get; set; }
        
        /// <summary>
        /// Data can include the span too, but it may be encrypted if the pipeline is encrypted
        /// </summary>
        public ReadOnlyMemory<byte> Data => _data;
        
        /// <summary>
        /// Encryption key
        /// </summary>
        public byte[]? EncryptionKey { get; set; }
        
        /// <summary>
        /// Always unecrypted span uint64
        /// </summary>
        public ReadOnlyMemory<byte> Span => _span;
        
        /// <summary>
        /// Ordered Id, from 0 to n with the last chunk
        /// </summary>
        public long NumberId { get; }
    }
}