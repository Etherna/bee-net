// Copyright 2021-present Etherna SA
// This file is part of Bee.Net.
// 
// Bee.Net is free software: you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
// 
// Bee.Net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with Bee.Net.
// If not, see <https://www.gnu.org/licenses/>.

using Etherna.BeeNet.Models;
using System;
using System.Threading;

namespace Etherna.BeeNet.Hashing.Pipeline
{
    public sealed class HasherPipelineFeedArgs
    {
        // Fields.
        private readonly byte[]? _span;
        private byte[] _data;
        
        // Constructor.
        public HasherPipelineFeedArgs(
            IHasher hasher,
            byte[] data,
            byte[]? span = null,
            long numberId = 0,
            SemaphoreSlim? prevChunkSemaphore = null)
        {
            ArgumentNullException.ThrowIfNull(data, nameof(data));
            
            if (span is not null)
            {
                if (data.Length < SwarmChunk.SpanSize)
                    throw new InvalidOperationException("Data must contain also span, if present");
                if (span.Length != SwarmChunk.SpanSize)
                    throw new ArgumentOutOfRangeException(nameof(span), $"Span must have length of {SwarmChunk.SpanSize}");
            }
            
            _data = data;
            _span = span;
            Hasher = hasher;
            NumberId = numberId;
            PrevChunkSemaphore = prevChunkSemaphore;
        }
        
        // Properties.
        /// <summary>
        /// The optional chunk encryption key
        /// </summary>
        public XorEncryptKey? ChunkKey { get; internal set; }

        /// <summary>
        /// Data can include the span too, but it may be encrypted if the pipeline is encrypted
        /// </summary>
        public ReadOnlyMemory<byte> Data
        {
            get => _data;
            internal set => _data = value.ToArray();
        }
        
        /// <summary>
        /// Hash generated by BMT
        /// </summary>
        public SwarmHash? Hash { get; set; }

        public IHasher Hasher { get; }

        /// <summary>
        /// Always unecrypted span uint64
        /// </summary>
        public ReadOnlyMemory<byte> Span => _span;

        /// <summary>
        /// Ordered id, from 0 to n with the last chunk
        /// </summary>
        public long NumberId { get; }

        /// <summary>
        /// Previous chunk semaphore. Occuped resource until chunk is processing.
        /// </summary>
        public SemaphoreSlim? PrevChunkSemaphore { get; }
    }
}